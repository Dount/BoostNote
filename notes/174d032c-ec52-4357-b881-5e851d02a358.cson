createdAt: "2020-09-07T13:12:52.024Z"
updatedAt: "2020-09-25T15:51:11.752Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "C++ 核心编程"
tags: []
content: '''
  # C++ 核心编程
  [TOC]
  
  ## 1.内存模型
  ### 1.1代码区
  - 存放CPU执行的机器指令
  - 代码区是共享的，共享的目的是对于频繁执行的程序，只需要再内存中又一份代码即可。
  - 代码区是只读的，使其只读的原因是防止程序以外地修改了它的指令.
  
  ### 1.2 全局区
  - 全局变量和静态变量存在在此。
  - 全局区还包含了常量去，字符串常量和其他常量也存放在此。
  - 该区域的数据在程序结束后由操作系统释放。
  
  ### 1.3 栈区
  - 由编译器自动分配释放。
  - 局部变量存放在栈区，栈区的数据在函数执行完毕后自动释放。
  
  ### 1.4 堆区
  - 由程序员分配和释放
  - 若程序员不释放由系统回收。
  - 在C++中主要利用new在堆区开辟内存
  - **指针本质也是局部变量，存放在栈上，指针保存的数据是放在堆区**。
  ### 1.5 new操作符
  c++中利用new操作符在堆区开辟数据
  堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete.
  ```
  int *fun(){
      int * a =new int(10);
      return a;
  }
  
  int main(){
  
      int *p =fun();
      cout<< *p<<endl;
      cout<< *p<<endl;
      delete p;
      cout<< *p<<endl;
  
      int *arr=new int[10];
      for(int i=0;i<10;i++){
          arr[i]=i+100;
      }
  
      for(int i=0;i<10;i++){
          cout<<arr[i]<<endl;
      }
      //释放数组
      delete []arr;
  
      system("pause");
      return 0;
  }
  ```
  
  ## 2.引用
  
  ### 2.1 引用的基本语法
  作用：给变量起别名
  语法：数据类型 &别名 =原名
  ```
  int main(){
  
      int a= 10;
      int &b=a;
  
      cout<< "a="<<a<<endl;
      cout<< "b="<<b<<endl;
  
      b=100;
      cout<<"a=" <<a<<endl;
      cout<<"b=" <<b<<endl;
      
      system("pause");
      return 0;
  }
  ```
  ### 2.2 引用注意事项
  - 引用必须初始化 (int &b;错误)
  - 引用在初始化后，不可以改变 
  ```
  int main(){
  
     int a=10;
     //引用必须初始化
     int &b=a;
     //引用初始化后，不可以改变
     int c=20;
     
     b=c; //赋值操作，而不是更改引用
  
     cout<<"a="<<a<<endl;
     cout<<"b="<<b<<endl;
     cout<<"c="<<c<<endl;
     system("pause");
     return 0;
  }
  ```
  
  ### 2.3 引用做函数参数
  函数传参时，利用引用的技术让形参修饰实参，可以简化指针修改实参。
  ```
  int mySwap03(int &a,int &b){
     int temp =a;
     a=b;
     b=temp;
  }
  
  int main(){
     int a=10;
     int b=20;
     mySwap03(a,b);
     cout<<"a="<<a<<endl;  //a=20
     cout<<"b="<<b<<endl;  //b=10
     
     system("pause");
     return 0;
  }
  ```
  
  ### 2.4 引用做函数返回值
  - 不要返回局部变量的引用
  - 函数的调用可以作为左值
  ```
  int& test1(){
     int a=10;
     return a;
  }
  
  int& test2(){
     static int a=20;
     return a;
  }
  
  int main(){
     //不能返回局部变量的引用
     int& ref=test1();
     cout<<"ref="<<ref<<endl;
     cout<<"ref="<<ref<<endl;
  
     //如果函数做左值，那么必须返回引用
     int& ref2=test2();
     cout<<"ref2="<<ref2<<endl;
     cout<<"ref2="<<ref2<<endl;  
     test2() =1000;
  
     cout<<"ref2="<<ref2<<endl;
     cout<<"ref2="<<ref2<<endl;
  
     system("pause");
     return 0;
  }
  ```
  ### 2.5 引用的本质
  **引用的本质在C++内部实现是一个指针常量**
  ```
  //发现是引用，转换为 int*const ref =&a;
  void fun(int& ref){
     ref =100; //ref 是引用，转换为*ref =100
  }
  
  int main(){
     int a=100;
  
     //自动转换为 int* const ref =&a;指针常量时指针指向不可改变。
     int& ref=a;
     ref =20;// 内部发现ref是引用，自动转换为：*ref =20;
     cout<<"a:"<<a<<endl;
     cout<<"ref:"<<ref<<endl;
     fun(a);
     cout<<"ref:"<<ref<<endl;
     system("pause");
     return 0;
  }
  ```
  
  ### 2.6 常量引用
  - 引用主要用来修饰形参，防止误操作。
  - 数形参列表中可以const修饰实参，防止形参改变实参。
  ```
  void fun(const int& ref){
     //ref =100; //不能进行修改.
     cout<<ref<<endl;
  }
  
  int main(){
     const int& ref =10;
     //ref=100; 加入const后不可以修改变量.
     
  
     int a =10;
     fun(a);
     system("pause");
     return 0;
  }
  ```
  
  ## 3 函数提高
  
  ### 3.1 函数的默认参数
  在C++中 函数的形参列表中形参是可以有默认值的。
  语法：返回值类型 函数名 (参数=默认值){}
  - 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值
  - 如果函数声明有默认值，函数实现的时候就不能有默认参数
  
  ### 3.2 函数的重载
  函数名可以相同，提高复用性
  
  函数重载满足条件:
  - 同一个作用域下
  - 函数名称相同
  - 函数参数类型不同，或者个数不同或者顺序不同
  ```
  void fun(){
     cout<<"func的调用！"<<endl;
  }
  
  void fun(int a){
     cout<<"a="<<a<<endl;
  }
  
  void fun(int a,int b){
     cout<<"a="<<a<<",b="<<b<<endl;
  }
  
  void fun(int a,double b){
     cout<<"a="<<a<<",b="<<b<<endl;
  }
  
  void fun(double b,int a){
     cout<<"a="<<a<<",b="<<b<<endl;
  }
  
  int main(){
     fun();
     fun(10);
     fun(10,5);
     fun(5,10.5);
     fun(10.5,5);
     system("pause");
     return 0;
  }
  ```
  ### 3.3 函数重载的注意事项
  - 引用作为重载条件
  - 函数重载碰到函数默认参数
  
  ## 4 类和对象
  
  ### 4.1 封装
  #### 4.1.1 封装的意义
  - 将属性和行为作为一个整体，表现生活中的事务.
  - 将属性和行为加以权限控制
  ```
  class Circle{
  public : //访问权限，公共的权限
     int m_r; //属性
     //行为
     double calculateZC(){
        return  2 * PI * m_r;
     }
  };
  
  int main(){
     Circle c1; //创建对象
     c1.m_r=10; //对属性进行赋值
     cout<<"圆的周长为="<<c1.calculateZC()<<endl;
  
     system("pause");
     return 0;
  }
  ```
  #### 4.1.2 封装案例
  ```
  class Student{
     public:
        void setName(string name){
           m_name =name;
        }
        void setID(int id){
           m_id=id;
        }
        void showStudent(){
           cout<<"name:"<<m_name<<"ID:"<< m_id <<endl;
        }
  
     public:
        string m_name;
        int m_id;
  };
  
  int main(){
  
     Student mstudent;
     mstudent.setName("德玛西亚");
     mstudent.setID(250);
     mstudent.showStudent();
  
     system("pause");
     return 0;
  }
  ```
  
  #### 4.1.3 访问权限
  - 公共权限public 成员类内可以访问，类外可以访问
  - 保护权限protected 成员类内可以访问，类外不可以访问 儿子可以访问父亲中的保护内容。
  - 私有权限private 成员类内可以访问，类外不可以访问 儿子不可以访问父亲的私有内容。
  
  #### 4.1.4 struct和class区别
  在C++中struct和class唯一的区别就在于默认的访问权限不同。
  - struct默认权限为公共
  - class默认权限为私有
  
  ```
  class Student{
     int m_A; //默认是私有权限
  };
  
  struct teacher{
     int m_A; //默认是公共权限
  };
  ```
  #### 4.1.5 成员属性设置为私有
  优点1：将所有成员属性设置为私有，可以自己控制读写权限。
  优点2：对于写权限，我们可以检测数据的有效性。
  
  ### 4.2 对象的初始化和清理
  
  #### 4.2.1 构造函数和析构函数
  C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，
  完成对象初始化和清理工作。对象的初始化和清理工作时编译器强制要求我们做的事情，
  **因此如果我们不提供构造和析构，编译器会提供构造函数和析构函数的空实现。**
  - 构造函数：主要作用于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。
  - 析构函数：主要作用于对象销毁前系统自动调用，执行一些清理工作。
  
  #### 4.2.2 构造函数语法
  类名(){}
  1. 构造函数，没有返回值也不写void。
  2. 函数名称与类名相同。
  3. 构造函数可以有参数，因此可以发生重载。
  4. 程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次。
  
  #### 4.2.3 析构函数
  ~类名(){}
  1. 析构函数，没有返回值也不写void。
  2. 函数名称与类名相同，在名称前加上符号 ~。
  3. 析构函数**不可以有参数**，因此不可以发生重载。
  4. 程序在对象**销毁前会自动调用析构**，无须手动调用，而且只会调用一次。
  
  #### 4.2.4 构造和析构案例
  ```
  class Person{
     public:
     //构造函数
     Person(){
        cout<<"Person的构造函数调用"<<endl;
     }
  
     ~Person(){
        cout<<"Person的析构函数调用"<<endl;
     }
  };
  
  //为了保证析构函数能走到，因此采用局部方法来调用。
  //系统函数在对象销毁的情况下调用。如果在Main函数中不会自动调用析构。
  void test01(){
     Person p;
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  ```
  
  #### 4.2.5 构造函数的分类和调用
  两种分类方式：
  按参数分为：有参构造和无参构造
  按类型分为：普通构造和拷贝构造
  
  三种调用方式：
  括号法
  显示法
  隐式转换法
  ```
  class Person{
  
  public:
        int age;
  
  public:
        //无惨(默认)构造函数
        Person(){
           cout << "无参构造函数"<<endl;
        }
        //有参构造函数
        Person(int a){
           age =a;
           cout<<"有参构造函数！"<<endl;
        }
        //拷贝构造函数
        Person(const Person& p){
           age=p.age;
           cout<<"拷贝构造函数！"<<endl;
        }
        //析构函数
        ~Person(){
           cout <<"析构函数"<<endl;
        }
  };
  
  //调用无参构造函数
  void test01(){
     Person p;
  }
  
  //调用有参的构造函数
  void test02(){
     //括号法
     Person p1(10);
     //调用拷贝构造方法。
     //Person p2(p1);
  
     //显示法
     Person p2 = Person(10);
     //调用拷贝构造方法。
     Person p3 = Person(p2);
     
     //隐式转换法
     Person p4 =10; //Person p4 =Person(10);
     Person p5 =p4; //Person p5 =Person(p4);
  }
  
  int main(){
     test01();
     test02();
     system("pause");
     return 0;
  }
  ```
  #### 4.2.6 拷贝构造函数调用时机
  C++中拷贝构造函数调用时机通常有三种情况
  - 使用一个已经创建完毕的对象来初始化一个新对象。
  - 值传递的方式给函数参数传值。
  - 以值方式返回局部对象。
  
  #### 4.2.7 构造函数调用规则
  默认情况下，c++编译器至少给一个类添加3个构造函数
  1. 默认构造函数(无参，函数体为空)
  2. 默认析构函数(无参，函数体为空)
  3. 默认拷贝构造函数，对属性进行值拷贝 (值拷贝)
  
  构造函数调用规则如下：
  - 如果用户定义**有参构造函数**，c++不在提供默认无参构造，但是会提供默认拷贝构造。
  - 如果用户自定义拷贝构造函数，c++不会再提供其他构造函数。
  ```
  class Person{
  public:
        Person(){
           cout << "无参构造函数"<<endl;
        }
  
        Person(int a){
           age =a;
           cout<<"有参构造函数！"<<endl;
        }
  
        Person(const Person& p){
           age=p.age;
           cout<<"拷贝构造函数！"<<endl;
        }
        ~Person(){
           cout <<"析构函数"<<endl;
        }
        int age;
  };
  
  //如果有了自定义有参构造函数，不在提供默认构造函数，但会提供拷贝构造函数。
  void test01(){
     //Person(); //会报错
     Person p1(28);
     Person p2(p1);
     cout<<"age="<<p2.age<<endl;
  }
  
  //如果有了自定义拷贝构造行数，不再提供其它的构造函数
  void test02(){
     Person p1(10); //没有其它的构造函数可以传递值。
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  ```
  #### 4.2.8 深拷贝与浅拷贝 (重点)
  浅拷贝：简单的赋值拷贝操作。**会带来堆区的内存重复释放的问题，需要用深拷贝解决**
  深拷贝：在堆区重新申请空间，进行拷贝操作。
  ```
  class Person{
  public:
        Person(){
           cout << "无参构造函数"<<endl;
        }
  
        Person(int a,int height){
           age =a;
           m_Height=new int(height);
           cout<<"有参构造函数！"<<endl;
        }
  
        Person(const Person& p){
           age=p.age;
           cout<<"拷贝构造函数！"<<endl;
           //m_Height =p.m_Height;//编译器会自己实现这行代码。但为了解决问题，不能让编译器执行。
           //需要在堆上再开辟一个内存。
           m_Height=new int(*p.m_Height);
        }
  
        ~Person(){
           //析构函数中释放掉创建在堆区上的内存。
           if(m_Height!=NULL){
              //会出问题，由于堆区是先进后出的释放对象，P2会提前把m_Height堆上创建的内存释放掉，导致P1再去释放时找不到。
              delete m_Height;
              m_Height =NULL;
           }
           cout <<"析构函数"<<endl;
        }
        int age;
        int *m_Height ;
  };
  
  void test01(){
     Person p1(28,160);
     cout<<"age="<<p1.age<<endl;
     cout<<"height="<<*p1.m_Height<<endl;
  
     Person p2(p1);
     cout<<"age="<<p2.age<<endl;
     cout<<"height="<<*p2.m_Height<<endl;
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  
  ```
  #### 4.2.9 初始化列表
  语法：构造函数():属性1(值1),属性2(值2)....{}
  ```
  Person(int a,int b, int c):m_A(a),m_B(b),m_C(c)
  {
  
  }
  ```
  
  #### 4.2.10 类对象作为类成员
  **当其他类对象作为本类成员，构造时候先构造类对象，再构造自身，析构的顺序与构造相反。
  ```
  class Phone{
  public:
       Phone(string name){
          m_Phonename=name;
          cout<<"Phone构造函数"<<endl;
       }
       ~Phone(){
          cout<<"Phone析构函数"<<endl;
       }
       string m_Phonename;
     
  };
  
  class Person{
  public:
        Person(string name,string pname):m_name(name),m_phone(pname){
           cout<<"Person构造函数"<<endl;
        }
        ~Person(){
           cout<<"Person析构函数"<<endl;
        }
        void playGame(){
           cout<<"Person:"<<m_name << ",mPhone:"<<m_phone.m_Phonename<<endl;
        }
        string m_name;
        Phone m_phone;
  };
  
  void test01(){
     Person p("zhouwei","iphone");
     p.playGame();
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  ```
  
  #### 4.2.11 静态成员
  静态成员就是在成员变量和成员函数前加上关键字static,称为静态成员。
  静态成员分为：
  1. 静态成员变量
     1)所有对象共享同一份数据
     2)在编译阶段分配内存
     3)类内声明，类外初始化
  2. 静态成员函数
     1)所有对象共享同一个函数
     2)静态成员函数只能访问静态成员变量，即不可以访问非静态成员变量。
  
  ```
  class Person{
     public:
     //静态成员函数特点:
     //1 程序共享一个函数
     //2 静态成员函数只能访问静态成员变量
     static void func(){
        cout << "func调用" <<endl;
        m_A =100;
        //m_B =100;  不可以访问非静态成员变量
     }  
     static int m_A;//静态成员变量
     int m_B;
     private:
     //静态成员函数也有访问权限
     static void func2(){
        cout << "func2调用" <<endl;
     }
  };
  int Person ::m_A =10; 
  
  int main(){
     //静态成员变量两种访问方式
     //1.通过对象
     Person p1;
     p1.func();
     //2. 通过类名
     Person::func();
     //Person::func2();// 私有权限访问不到
     system("pause");
     return 0;
  }
  ```
  ### 4.3 C++ 对象模型和this指针
  
  #### 4.3.1 成员变量和成员函数分开存储
  在C++中，类内的成员变量和成员函数分开存储
  只有非静态成员变量才属于类的对象上。
  ```
  int m_A //非静态成员变量，属于类的对象上
  static int m_B //非静态成员变量 不属于类的对象上
  void func(){} //非静态成员函数 不属于类对象上
  static void func2(){} //静态成员函数 不属于类的对象上
  ```
  #### 4.3.2 this 指针概念 (重要)
  **this 指针指向被调用的成员函数所属的对象**
  
  this指针是隐含每一个非静态成员函数的一种指针。
  this指针不需要定义，直接使用即可。
  
  this指针的用途:
  - 当形参和成员变量同名时，可用this 指针来区分 (解决名称冲突)
  - 在类的非静态成员函数中返回对象本身，可使用return *this 
  ```
  class Person{
  public:
     Person(int age){
        //当形参和成员变量同名时，可用this指针来区分.
        this->age =age;
     }
  
     //返回值的话就是创建新的对象，返回引用的话就不会创建新对象。
     Person& PersonAddPerson(Person &p){
        this->age +=p.age;
        //返回对象本身
        return *this;
     }
  
     int age;
  };
  
  void test01(){
     Person p1(10);
     cout << "p1.age=" <<p1.age <<endl;
  
     Person p2(10); //链式编程思想
     p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);
     cout<< "p2.age=" <<p2.age<<endl; 
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  ```
  #### 4.3.3 const修饰成员函数
  常函数:
  - 成员函数后加const后我们称为这个函数为常函数。
  - 常函数内不可以修改成员属性
  - 成员属性声明时加关键字mutable后，在常函数中依然可以修改。
  
  常对象：
  - 声明对象前加const称该对象为常对象
  - 常对象只能调用常函数
  
  #### 4.3.4 友元
  友元的目的就是让一个函数或者类访问另一个类中私有成员。
  友元关键字为friend
  友元的三种实现:
  1. 全局函数做友元
  ```
  class Building{
  
     //goodGay 全局函数是Building类的友元函数，可以访问类中的私有内容;
     friend void goodGay(Building *building);
     public:
        Building(){
           this -> m_SittingRoom = "客厅";
           this -> m_BedRoom = "卧室";
        }
     public:
        string m_SittingRoom;//客厅
     private:
        string m_BedRoom;
  
  };
  void goodGay(Building *building){
     cout <<"好基友正在访问"<< building ->m_SittingRoom <<endl;
     cout <<"好基友正在访问"<< building ->m_BedRoom <<endl;
  }
  void test01(){
     Building b;
     goodGay(&b);
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  ```
  2. 类做友元
  ```
  class Building;
  class goodGay{
  
  private:
     Building *building;
  public:
     goodGay();
     void visit();
  };
  
  class Building{
     //goodGay类是Building类的好朋友，可以访问到Building类中私有内容
     friend class goodGay;
  public:
     Building();
  public:
     string m_SittingRoom;//客厅
  private:
     string m_BedRoom;//卧室
  };
  //初始化构造函数
  Building::Building(){
     this->m_SittingRoom = "客厅";
     this->m_BedRoom = "卧室";
  }
  //初始化构造函数
  goodGay::goodGay(){
     building = new Building;
  }
  
  
  void goodGay::visit(){
     cout <<"好基友正在访问"<< building ->m_SittingRoom <<endl;
     cout <<"好基友正在访问"<< building ->m_BedRoom <<endl;
  }
  
  void test01(){
     goodGay gg;
     gg.visit();
  }
  
  int main(){
     test01();
     system("pause");
     return 0;
  }
  ```
  ### 4.4 继承
  #### 4.4.1 继承的基本语法
  语法：class子类 ：继承方式 父类
  ```
  class jilei : public fulei{}
  ```
  #### 4.4.2 继承方式 
  - 公共继承(public)
  - 保护继承(protected)
  - 私有继承(private)
  
  ![1600440995.png](:storage\\174d032c-ec52-4357-b881-5e851d02a358\\a3d2387a.png)
  
  ```
  class BaseClass{
     public:
        int m_a;
     protected:
        int m_b;
     private:
        int m_c;
  };
  //公共继承
  class test1 : public BaseClass{
     public:
        void func(){
           m_a = 10;  //父类中的公共权限成员，到子类中依然是公共权限
           m_b = 10;  //父类中的保护权限成员，到子类中依然是保护权限
           //m_c = 10;  //父类中的私有权限成员，子类访问不到
        }
  };
  //保护继承
  class test2 : protected BaseClass{
     public:
        void func(){
           m_a = 10; //父类中公共成员，到子类中变为保护权限
           m_b = 10; //父类中保护成员，到子类中变为保护权限
           //m_c = 10; //父类中私有成员，子类访问不到
        }
  };
  void test01 (){
     test2 s1;
     //s1.m_a=100; //在test2中m_a变为保护权限，因此类外访问不到
  }
  class test3 : private BaseClass{
     public:
        void func(){
           m_a =100; //父类中公共成员到子类中变为私有成员
           m_b =100; //父类中保护成员到子类中变为私有成员
           //m_c =100; //父类中私有成员,子类访问不到
        }
  };
  void test02(){
     test02 s1;
     //s1.m_a =1000; //在test3中m_a变为私有权限，因此类外访问不到
  }
  int main(){
     system("pause");
     return 0;
  }
  ```
  #### 4.4.3 继承中的构造和析构的顺序
  子类继承父类后，当创建子类对象，也会调用父类的构造函数
  顺序如下：
  先构造父类，再构造子类。
  先析构子类，再析构父类。
  
  #### 4.4.4 继承同名成员处理方式
  - 访问子类同名成员，直接访问即可。
  - 访问父类同名成员，需要加作用域。
  ```
  class Base{
     public:
        Base(){
           m_a=100;
        }
        int m_a;
  
        void func(){
           cout<<"Base -func()调用" <<endl;
        }
  };
  
  class Son:public Base{
     public:
        Son(){
           m_a=200;
        }
        int m_a;
  
        void func(){
           cout<<"Son -func()调用" <<endl;
        }
  
  };
  
  //同名的成员变量
  void test1(){
     Son s;
     cout<<"Son 下的m_a"<<s.m_a<<endl;
     //如果通过子类对象，访问到父类中同名成员，需要加作用域。
     cout<<"Base 下的m_a"<<s.Base::m_a<<endl;
  }
  
  //同名的成员函数
  void test2(){
     Son s;
     s.func();
     s.Base::func();
     //如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名成员函数
     //如果想访问到父类中被隐藏的同名成员函数，需要加作用域。
  
  }
  
  int main(){
     test1();
     test2();
     system("pause");
     return 0;
  }
  ```
  #### 4.4.5 继承同名静态成员处理方式
  - 访问子类同名成员，直接访问即可。
  - 访问父类同名成员，需要加作用域。
  ```
  class Base
  {
     public :
        static int m_A; //类内声明
  
        static void func(){
           cout<<"Base -static void funct()"<<endl;
        }
  };
  
  int Base::m_A=100; //类外初始化
  
  class Son:public Base{
     public:
        static int m_A;
  
        static void func(){
           cout<<"Son -static void funct()"<<endl;
        }
  };
  int Son::m_A =200;
  
  //同名的静态成员属性
  void test1(){
     //通过对象访问
     cout<<"通过对象访问:" <<endl;
     Son s;
     cout<<"Son 下 m_A="<<s.m_A<<endl;
     cout<<"Base 下 m_A="<< s.Base::m_A<<endl;
  
     //通过类名访问
     cout<<"通过类名访问:"<<endl;
     cout<<"Son 下m_A="<<Son::m_A<<endl;
     cout<<"Base 下m_A=" <<Son::Base::m_A<<endl; 
  }
  //同名的静态成员函数
  void test2(){
     //通过对象访问
     cout<<"通过对象访问:" <<endl;
     Son s;
     s.func();
     s.Base::func();
      //通过类名访问
     cout<<"通过类名访问:"<<endl;
     Son::func();
     Son::Base::func();
  }
  
  int main(){
     test1();
     test2();
     system("pause");
     return 0;
  }
  ```
  #### 4.4.6 多继承语法
  C++允许一个类继承多个类
  ```
  class 子类：继承方式 父类，继承方式 父类2
  ```
  多继承可能会引发父类中有同名成员出现，需要加作用域区分。
  **C++实际开发中不建议用多继承**
  ```
  class Base1
  {
     public :
        Base1(){
           m_A=100;
        }
        int m_A;
  };
  class Base2
  {
     public :
        Base2(){
           m_A=200;
        }
        int m_A;
  };
  class Son : public Base1,public Base2{
     public:
        Son(){
           m_C=300;
           m_D=400;
        }
        int m_C;
        int m_D;
  };
  void test1(){
     Son s;
     cout<<"sizeof Son =" <<sizeof(s)<<endl;
     //当父类中出现同名成员，需要加作用域区分
     cout<< "Base1::m_A=" <<s.Base1::m_A<<endl;
     cout<<"Base2::m_A=" <<s.Base2::m_A<<endl; 
  }
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  ### 4.6 多态
  
  #### 4.6.1 多态的基本概念
  1. 静态多态
  函数**重载**和**运算符重载**属于静态多态，复用函数名
  2. 动态多态
  **子类**和**虚函数**实现运行时多态
  3. 静态多态和动态多态区别
  静态多态的函数地址早绑定 - 编译阶段确定函数地址
  动态多态的函数地址晚绑定 - 运行阶段确定函数地址
  4. 动态多态满足条件
  - 有继承关系
  - 子类**重写**父类的虚函数(函数返回值类型,函数名,参数列表完全相同)
  
  5. 动态多态使用
  父类的指针或者引用 指向子类对象
  ```
  class Animal {
     public:
     //虚函数 
     virtual void speak(){
        cout<<"动物在说话"<<endl;
     }
  };
  
  class Cat :public Animal{
     public:
        //重写 函数返回值类型， 函数名，参数列表 完全相同.
        void speak(){
           cout<<"小猫在说话"<<endl;
        }
  };
  //地址早绑定，在编译阶段确定函数地址。
  //由于是地址早绑定，speak函数的地址已经提前绑定好了。
  //如果想执行cat.speak.那么这个函数地址就不能提前绑定。
  //需要在运行阶段进行晚绑定。
  void doSpeak(Animal &animal){
     animal.speak();
  }
  
  void test1(){
     Cat cat;
     doSpeak(cat);
  }
  
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  #### 4.6.2 多态案例(一)
  ```
  //抽象類
  class AbstractCalculator{
     public:
        virtual int getResult(){
  
        }
        int m_Num1;
        int m_Num2;
  };
  
  class AddCalculator :public AbstractCalculator{
     public:
        int getResult(){
           return m_Num1+m_Num2;
        }
  };
  
  class DeleteCalculator :public AbstractCalculator{
     public:
        int getResult(){
           return m_Num1-m_Num2;
        }
  };
  
  class MulCalCalculator :public AbstractCalculator{
     public:
        int getResult(){
           return m_Num1*m_Num2;
        }
  };
  
  void doResult(AbstractCalculator &abc){
     abc.m_Num1=100;
     abc.m_Num2=100;
     cout<<abc.m_Num1<<"-"<<abc.m_Num2<<"="<<abc.getResult()<<endl;
  }
  
  void test1(){
  
     //多态的使用条件
     //父类指针或者引用指向子类对象
     //使用指针
     AbstractCalculator *abc =new AddCalculator;
     abc->m_Num1=10;
     abc->m_Num2=10;
     cout<<abc->m_Num1<<"+"<<abc->m_Num2<<"="<<abc->getResult()<<endl;
     delete abc;
  
     abc = new DeleteCalculator;
     abc->m_Num1=50;
     abc->m_Num2=50;
     cout<<abc->m_Num1<<"-"<<abc->m_Num2<<"="<<abc->getResult()<<endl;
  
     //使用引用
     DeleteCalculator mdeleteCalculator;
     doResult(mdeleteCalculator);
  }
  
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  #### 4.6.3 纯虚函数和抽象类
  在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容
  
  因此可以将虚函数改为纯虚函数
  
  纯虚函数语法：virtual 返回值类型 函数名 (参数列表)=0;
  
  当类中有了纯虚函数，这个类也称为抽象类。
  
  抽象类特点：
  - 无法实例化对象
  - 子类必须重写抽象类中的纯虚函数，否则也属于抽象类
  
  ```
  class Base{
     public:
        //纯虚函数
        virtual void func()=0;
  };
  
  class son :public Base{
     public:
        //Base b; 抽象类是无法实例化对象
        //new Base； 抽象类是无法实例化对象
        //子类中必须重写父类中的纯虚函数，否则无法实例化对象。
        void func(){
           cout<<"func调用"<<endl;
        };
  };
  
  int main(){
     son mson;
     mson.func();
  
     Base *base = new son;
     base->func();
     delete base;
     
     system("pause");
     return 0;
  }
  ```
  
  #### 4.6.4 多态案例(二)
  ```
  class AbstractDrinking{
     public:
        //煮水
        virtual void Boil()=0;
        //冲泡
        virtual void Brew()=0;
        //倒入杯中
        virtual void PourInCup()=0;
        //加入辅料
        virtual void PutSomething()=0;
        void makeDrink(){
           Boil();
           Brew();
           PourInCup();
           PutSomething();
        }
  };
  
  //制作咖啡
  class Coffee :public AbstractDrinking{
     public:
        //煮水
        virtual void Boil(){
           cout<<"煮农夫山泉"<<endl;
        }
        //冲泡
        virtual void Brew(){
           cout<<"冲泡咖啡"<<endl;
        }
        //倒入杯中
        virtual void PourInCup(){
           cout<<"倒入杯中"<<endl;
        }
        //加入辅料
        virtual void PutSomething(){
           cout<<"加入牛奶"<<endl;
        }
  };
  
  //制作茶叶
  class Tea :public AbstractDrinking{
     public:
        //煮水
        virtual void Boil(){
           cout<<"煮矿泉水"<<endl;
        }
        //冲泡
        virtual void Brew(){
           cout<<"冲泡茶叶"<<endl;
        }
        //倒入杯中
        virtual void PourInCup(){
           cout<<"倒入杯中"<<endl;
        }
        //加入辅料
        virtual void PutSomething(){
           cout<<"加入柠檬"<<endl;
        }
  };
  void dowork(AbstractDrinking *abs){
     abs->makeDrink();
     delete abs;
  }
  
  void test1(){
     dowork(new Coffee);
  }
  
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  #### 4.6.5 虚析构和纯虚析构
  多态使用时，如果子类中又属性开辟到堆区，那么父类指针在释放时无法调用
  到子类的析构代码。
  解决方式：将父类中的析构函数改为虚析构或者纯虚析构
  
  虚析构和纯虚析构共性：
  - 可以解决父类指针释放子类对象
  - 都需要有具体的函数实现
  虚析构和纯虚析构区别：
  - 如果是纯虚析构，该类属于抽象类，无法实例化对象。
  
  虚析构语法：
  virtual ~类名(){}
  
  纯虚析构语法：
  virtual ~类名()=0;
  类名::~类名(){} 类外实现
  
  ```
  class Animal{
     public:
        Animal(){
           cout<<"Animal 构造函数调用!"<<endl;
        }
        virtual void Speak()=0;
        
        //析构函数加上Virtual关键字，变成虚析构函数
        virtual ~Animal(){
           cout<<"Animal虚析构函数调用!"<<endl;
        }
        //virtual ~Animal()=0;
  };
  // Animal::~Animal(){
  //    cout<<"Animal 纯虚析构函数调用!"<<endl;
  // }
  
  //纯虚析构函数的类也是一个抽象类。不能够实例化
  
  class Cat :public Animal{
  public:
     Cat(string name){
        cout<<"Cat构造函数调用!"<<endl;
        m_Name = new string(name);
     }
     
     virtual void Speak(){
        cout<<*m_Name<<"小猫在说话!"<<endl;
     }
  
     ~Cat(){
        cout<<"Cat析构函数调用!"<<endl;
        if(this ->m_Name!=NULL){
           delete m_Name;
           m_Name =NULL;
        }
     }
  public:
     string *m_Name;
  };
  
  void test1(){
    Animal *animal = new Cat("Tom");
    animal ->Speak();
  
     //通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏
     //虚析构函数就是用来解决通过父类指针释放子类对象。
     delete animal;
  }
  
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  总结：
  1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象。
  2. 如果子类中没有堆区数据，可以不写为虚析构或者纯虚析构
  3. 拥有纯虚析构函数的类也属于抽象类
  
  #### 4.6.6 多态案例(三)
  ```
  class CPU{
     public:
        //抽象的计算函数
        virtual void calculate() =0;
  };
  class VideoCard{
     public:
        //抽象的显示函数
        virtual void display() =0;
  };
  class Memory{
     public:
        //抽象的存储函数
        virtual void storage() =0;
  };
  class Computer{
     public:
        Computer(CPU *cpu,VideoCard *vc,Memory *mem){
           m_cpu = cpu;
           m_vc = vc;
           m_mem = mem;
        }
  
        void work(){
           m_cpu->calculate();
  
           m_vc->display();
  
           m_mem->storage();
        }
        //释放CPU零件
        ~Computer(){
           if(m_cpu!=NULL){
              delete m_cpu;
              m_cpu = NULL;
           }
           if(m_vc!=NULL){
              delete m_vc;
              m_vc = NULL;
           }
           if(m_mem!=NULL){
              delete m_mem;
              m_mem = NULL;
           }
        }
  
     private:
        CPU *m_cpu; 
        VideoCard *m_vc;
        Memory *m_mem;
  };
  class InterCPU :public CPU{
     public:
        virtual void calculate(){
           cout<<"Intel的CPU开始计算了！"<<endl;
        }
  };
  class InterVideoCard :public VideoCard{
     public:
        virtual void display(){
           cout<<"Intel的显卡开始显示了!"<<endl;
        }
  };
  class IntelMemory :public Memory{
     public:
        virtual void storage(){
           cout<< "Intel的内存条开始显示了！"<<endl;
        }
  };
  class LenovoCPU :public CPU{
     public:
        virtual void calculate(){
           cout<<"Lenovo的CPU开始计算了！"<<endl;
        }
  };
  class LenovoVideoCard :public VideoCard{
     public:
        virtual void display(){
           cout<<"Lenovo的显卡开始显示了!"<<endl;
        }
  };
  class LenovoMemory :public Memory{
     public:
        virtual void storage(){
           cout<< "Lenovo的内存条开始显示了！"<<endl;
        }
  };
  
  void test1(){
     //第一台电脑零件 //在堆区没有释放
     CPU * intelCpu = new InterCPU;
     VideoCard * intelCard = new InterVideoCard;
     Memory * intelMem = new IntelMemory;
  
     //创建第一台电脑
     Computer *computer1 = new Computer(intelCpu,intelCard,intelMem);
     computer1->work();
     delete computer1;
  }
  
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  ## 5 文件操作
  c++中对文件操作需要包含头文件fstream
  文件类型分为两种：
  1. 文本文件 -文件以文本的ASCII码形式存储在计算机中。
  2. 二进制文件 文件以文本的二进制形式存储在计算机中。
  
  操作文件的三大类：
  1. ofstream:写操作
  2. ifstream:读操作
  3. fstream:读写操作
  
  ### 5.1 文本文件
  #### 5.1.1 写文件
  写文件步骤如下：
  1. 包含头文件
    #include< fstream  >
  2. 创建流对象
    ofstream ofs;
  3. 打开文件
    ofs.open("文件路径",打开方式);
  4. 写数据
    ofs<< "写入的数据";
  5. 关闭文件
    ofs.close();
  
  打开方式：
  | 打开方式    | 说明                       |
  | ----------- | -------------------------- |
  | ios::in     | 为读文件而打开文件         |
  | ios::out    | 为写文件而打开文件         |
  | ios::ate    | 初始位置：文件尾           |
  | ios::app    | 追加方式写文件             |
  | ios::trunc  | 如果文件存在先删除，再创建 |
  | ios::binary | 二进制方式                 |
  文件打开方式可以配合使用，利用|操作符
  用二进制方式写文件 ios::binary | ios::out
  
  ```
  #include <fstream> //头文件包含
  
  void test1(){
     //创建流对象
     ofstream ofs;
  
     //指定打开方式
     ofs.open("test.txt",ios::out);
  
     //写内容
     ofs<<"姓名：张三"<<endl;
     ofs<<"性别：男"<<endl;
     ofs<<"年龄：18"<<endl;
  
     //关闭文件
     ofs.close();
  };
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  #### 5.1.2 读文件
  读文件步骤如下：
  1. 包含头文件
    #include< fstream >
  2. 创建流对象
    ifstream ifs;
  3. 打开文件并判断文件是否打开成功
    ifs.open("文件路径",打开方式);
  4. 读数据
    四种方式读取
  5. 关闭文件
    ifs.close();
  
  ```
  void test1(){
     //创建流对象
     ifstream ifs;
  
     //打开文件，并且判断是否打开成功
     ifs.open("test.txt",ios::in);
  
     if(!ifs.is_open()){
        cout<<"文件打开失败"<<endl;
        return;
     }
     //读数据
     char buf[1024] ={0};
     while (ifs >>buf){
        cout<<buf<<endl;
     }
     
     // //第二种读取方式
     // char buf1[1024] ={0};
     // while(ifs.getline(buf,sizeof(buf))){
     //    cout<<buf<<endl;
     // }
  
     // //第三种读取方式
     // string buf;
     // while( getline(ifs,buf)){
     //    cout<<buf<<endl; 
     // }
  
     // //第四种读取方式
     // char c;
     // while((c=ifs.get())!=EOF){
     //    //EOF end of file
     //    cout<<c;
     // }
     ifs.close();
  };
  
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  ### 5.2 二进制文件
  以二进制的方式对文件进行读写操作
  打开方式要指定为ios::binary
  
  #### 5.2.1 写文件
  二进制方式写文件主要利用流对象调用成员函数write
  函数原型：
  ```
  ostream& write(const char *buffer,int len);
  ```
  参数解:字符指针buffer指向内存中一段存储空间。len是读写的字节数。
  
  ```
  class Person{
     public:
        char m_Name[64];
        int m_Age; 
  };
  void test1(){
     //创建流对象
     ofstream ofs("person.txt",ios::out|ios::binary);
     //写文件
     Person p={"张三",18};
     ofs.write((const char *)&p,sizeof(Person));
     //关闭文件
     ofs.close();
  }
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
  
  #### 5.2.2 读文件
  二进制方式读文件主要利用流对象调用成员函数read
  函数原型：
  ```
  istream& read(char *buffer,int len);
  ```
  参数解释：字符指针buffer指向内存中一段存储空间，len是读写的字节数。
  
  ```
  class Person{
     public:
        char m_Name[64];
        int m_Age; 
  };
  void test1(){
     //创建流对象
     ifstream ifs;
     //打开文件 判断文件是否打开成功
     ifs.open("person.txt",ios::in|ios::out);
     if(!ifs.is_open()){
        cout<<"文件打开失败"<<endl;
        return;
     }
     //读文件
     Person p;
     ifs.read((char *)&p,sizeof(Person));
     cout<<"姓名："<<p.m_Name<<"，年龄:"<<p.m_Age<<endl;
     //关闭文件
     ifs.close();
  }
  int main(){
     test1();
     system("pause");
     return 0;
  }
  ```
'''
linesHighlighted: [
  178
  854
]
isStarred: false
isTrashed: false
