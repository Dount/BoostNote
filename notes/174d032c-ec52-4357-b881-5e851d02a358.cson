createdAt: "2020-09-07T13:12:52.024Z"
updatedAt: "2020-09-07T14:37:41.133Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "C++ 核心编程"
tags: []
content: '''
  # C++ 核心编程
  [TOC]
  
  ## 1.内存模型
  ### 1.1代码区
  - 存放CPU执行的机器指令
  - 代码区是共享的，共享的目的是对于频繁执行的程序，只需要再内存中又一份代码即可。
  - 代码区是只读的，使其只读的原因是防止程序以外地修改了它的指令.
  
  ### 1.2 全局区
  - 全局变量和静态变量存在在此。
  - 全局区还包含了常量去，字符串常量和其他常量也存放在此。
  - 该区域的数据在程序结束后由操作系统释放。
  
  ### 1.3 栈区
  - 由编译器自动分配释放。
  - 局部变量存放在栈区，栈区的数据在函数执行完毕后自动释放。
  
  ### 1.4 堆区
  - 由程序员分配和释放
  - 若程序员不释放由系统回收。
  - 在C++中主要利用new在堆区开辟内存
  - **指针本质也是局部变量，存放在栈上，指针保存的数据是放在堆区**。
  ### 1.5 new操作符
  c++中利用new操作符在堆区开辟数据
  堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete.
  ```
  int *fun(){
      int * a =new int(10);
      return a;
  }
  
  int main(){
  
      int *p =fun();
      cout<< *p<<endl;
      cout<< *p<<endl;
      delete p;
      cout<< *p<<endl;
  
      int *arr=new int[10];
      for(int i=0;i<10;i++){
          arr[i]=i+100;
      }
  
      for(int i=0;i<10;i++){
          cout<<arr[i]<<endl;
      }
      //释放数组
      delete []arr;
  
      system("pause");
      return 0;
  }
  ```
  
  ## 2.引用
  
  ### 2.1 引用的基本语法
  作用：给变量起别名
  语法：数据类型 &别名 =原名
  ```
  int main(){
  
      int a= 10;
      int &b=a;
  
      cout<< "a="<<a<<endl;
      cout<< "b="<<b<<endl;
  
      b=100;
      cout<<"a=" <<a<<endl;
      cout<<"b=" <<b<<endl;
      
      system("pause");
      return 0;
  }
  ```
  ### 2.1 引用注意事项
  - 引用必须初始化 (int &b;错误)
  - 引用在初始化后，不可以改变 
  ```
  int main(){
  
     int a=10;
     //引用必须初始化
     int &b=a;
     //引用初始化后，不可以改变
     int c=20;
     
     b=c; //赋值操作，而不是更改引用
  
     cout<<"a="<<a<<endl;
     cout<<"b="<<b<<endl;
     cout<<"c="<<c<<endl;
     system("pause");
     return 0;
  }
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
