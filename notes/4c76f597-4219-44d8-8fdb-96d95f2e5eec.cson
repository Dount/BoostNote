createdAt: "2020-10-22T14:35:24.656Z"
updatedAt: "2021-03-24T02:11:16.838Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "kotlin 零基础到进阶"
tags: []
content: '''
  # kotlin 零基础到进阶
  [TOC]
  ## 1 KotLin是什么
  使用Kotlin语言让Java程序员的工作变得更轻松，Java语言中的那些空指针错误、浪费时间的冗长的样板代码、啰嗦的语法限制等，在Kotlin语言中统统消失。Kotlin语言简单、务实，语法简洁而强大，安全且表达力强，极富生产力。
  
  ## 1.1 初始Kotlin
  Kotlin程序的入口点是一个名为main()的函数，它传递一个包含任何命令行参数的数组。
  ```
  fun main(args:Array<String>){
     val name = "World"
     println("Hello,$name!")
  }
  ```
  - Kotlin中使用fun关键字声明函数。
  - Kotlin中的打印函数是Println()
  
  ## 1.2 语言特性
  1. 实用主义
  Kotlin是一门偏重工程实践、编程上有极简风格的语言。
  2. 极简主义
  Kotlin语法简洁优雅不啰嗦，类型系统中一切皆是引用
  3. 空安全
  Kotlin中有一个简单完备的类型系统来支持空安全。
  4. 多范式
  Kotlin同时支持OOP与FP编程范式。各种编程风格的组合可以让我们更加直接地表达算法思想和解决问题的方案，可以赋予我们在思考上
  有更大的自由度和灵活性。
  5. 可扩展
  Kotlin可直接扩展类的函数与属性这与我们在Java中经常写的util类是完全不一样的体验！Kotlin是一种非常注重用户体验的语言。
  6. 高阶函数与闭包
  Kotlin的类型中，函数类型也是一等类型。在Kotlin中可以把函数当成值进行传递，这直接赋予了Kotlin函数式编程的特性，使用Kotlin可以写出一些非常“优雅”的代码。
  7. 支持快速实现DSL
  有了扩展函数、闭包等特性的支持，使用Kotlin实现一个领域特定语言(DSL)将会相当简单、方便。
  
  ### 1.2.1 扩展函数与扩展属性(★)
  Kotlin可以在不修改原来类的条件下自定义函数和属性，使它们表现得就像属于这个类一样。
  ```
  fun String.firshChar():String{ //给String类扩展一个firstChar()函数
     if (this.length == 0){   //这里的this代表调用者对象
        return ""
     }
     return this[0].toString() //返回下标为0的字符并转成String类型
  }
  
  fun main(args:Array<String>){
     val name = "World"
     println("Hello,${name.firshChar()}") //调用自定义的扩展函数
  }
  ```
  
  ### 1.2.2 不可空类型与空安全(★)
  Kotlin中引入了不可空类型与可空类型来明确声明一个变量是否可能为null，同时在编译期通过类型是否匹配来检查空指针异
  常，大大降低了空指针异常出现的概率。
  ```
  fun main(args:Array<String>){
     var a ="abc"// 声明一个字符串，编译器会默认推断变量a的类型为不可空的String
     //a = null 不可空类型不能赋值为null
     var b:String? = "abc" //声明一个可空的String?类型
     //b.length 可空类型不能直接调用方法，需要使用安全调用符?.或者断言调用!!.
     println(b?.length)
     b=null
     println(b?.length)
  }
  ```
  注意：调用可空类型不能直接调用方法，需要使用?
  
  ### 1.2.3 智能类型推断
  在声明变量的时候可以不指定类型，Kotlin编译器会自动推断出其类型。
  
  ## 2 Kotlin语法基础
  
  ### 2.1 变量
  在Kotlin中，所有的变量类型都是引用类型。Kotlin的变量分为val(不可变)和var(可变的)
  - val是只读的，仅能一次赋值，后面就不能被重新赋值。
  - var是可写的，在它生命周期中可以被多次赋值。
  ```
  fun main(args:Array<String>){
    val a:Int =1  //声明一个不可变的Int类型的变量a
     println(a)
     val b =2 //声明一个不可变不带类型的变量b
     println(b)
     //a++ 不可变的对象不能进行重新赋值
     var c:Int =3 //声明一个可变的Int类型的变量c
     println(c)
     var d =4 //声明一个可变不带类型的变量d
     println(d)
     println(++d) //可变变量可以重新赋值。
  }
  ```
  注意：1.val声明的变量不能对其赋值，2.变量类型可带可不带。3.变量名区分大小写
  
  ### 2.2 关键字
  Kotlin中的类修饰符
  | 类修饰符   | 说明              |
  | ---------- | ----------------- |
  | abstract   | 抽象类            |
  | final      | 不可被继承final类 |
  | enum       | 枚举类            |
  | open       | 可继承open类      |
  | annotation | 注解类            |
  | scaled     | 密封类            |
  | data       | 数据类            |
  
  Kotlin中的成员修饰符
  | 成员修饰符 | 说明               |
  | ---------- | ------------------ |
  | override   | 重写函数(方法)     |
  | open       | 声明函数可被重写   |
  | final      | 声明函数不可被重写 |
  | abstract   | 声明函数为抽象函数 |
  | lateinit   | 延迟初始化         |
  |            |                    |
  
  Kotlin中的访问权限修饰符
  | 访问权限修饰符 | 说明                       |
  | -------------- | -------------------------- |
  | private        | 私有，仅当前类可访问       |
  | protected      | 当前类以及继承该类的可访问 |
  | public         | 默认值，对外可访问         |
  | internal       | 整个模块内可访问           |
  
  Kotlin中的协变逆变修饰符
  | 协变逆变 | 说明                                    |
  | -------- | --------------------------------------- |
  | in       | 消费者类型修饰符,out T等价于？extends T |
  | out      | 生产者类型修饰符,in T等价于？ super T    |
  
  Kotlin中的函数修饰符
  | 函数修饰符 | 说明           |
  | ---------- | -------------- |
  | tailrec    | 尾递归         |
  | operator   | 运算符重载函数 |
  | infix      | 中缀函数       |
  | inline     | 内联函数       |
  | external   | 外部函数       |
  | suspend    | 挂起协程函数   |
  
  Kotlin中的属性修饰符
  | 属性修饰符  | 说明                                                                                                                |
  | ----------- | ------------------------------------------------------------------------------------------------------------------- |
  | const       | 常量修饰符                                                                                                          |
  | vararg      | 变长参数修饰符                                                                                                      |
  | noinline    | 不内联参数修饰符，有时，只需要将内联函数的部分参数使用内联Lambda,其他的参数不需要内联，可以使用noinline关键字修饰。 |
  | crossinline | crossinline限制Lambda表达式直接非局部return返回。                                                                   |
  
  Kotlin中的具体化类型修饰符
  | 具体化类型修饰符 | 说明           |
  | ---------------- | -------------- |
  | reified          | 具体化类型参数 |
  
  ### 2.3 流程控制语句
  
  #### 2.3.1 if 语句
  在Kotlin中，if是一个表达式，即它会返回一个值。
  
  ```
  fun max(a:Int,b:Int):Int{
    val max = if(a>b) a else b //if 表达式
    return max
  }
  fun max2(a:Int,b:Int):Int{
      val max = if(a>b){
          println("Max is a") //if的分支可以是代码块
          a                   //最后的表达式作为该代码块的返回值
      } else{
          println("Max is b")
          b
      }
      return max
  }
  fun main(args:Array<String>){
     println(max(1,2))
      println(max2(2,3))
  }
  ```
  注意：if后的括号不能省略，括号里表达式的值必须是布尔型。
  
  #### 2.3.2 when 表达式
  when表达式类似于switch…case表达式。when会对所有的分支进行检查直到有一个条件被满足。
  ```
  fun caseWhen(obj:Any?){
      when(obj){
          0,1,2,3,4,5,6,7,8,9 -> println("${obj}=>0~9之间的数字") //多个分支可以用逗号分隔。
          "hello" -> println("${obj}=>这个是字符串hello") //字符串
          is Char -> println("${obj}=>这是一个Char类型数据") //is类型判断
          else -> println("${obj}=>相当于java switch中的default")
      }
  }
  
  fun main(args:Array<String>){
      caseWhen(1)
      caseWhen("hello")
      caseWhen("x")
      caseWhen(null)
  }
  ```
  用when语句实现递归
  ```
  fun fact(n:Int):Int{
      var result =1
      when (n){
          0,1 ->result = 1
          else ->result = n* fact(n-1)
      }
      return  result
  }
  fun main(args:Array<String>){
      println(fact(10))
  }
  ```
  
  
  注意: 
  1. 如果其他分支都不满足条件会到else分支，
  2. 如果有多个分支需要用相同处理方式，可以把多个分支放在一起。用逗号隔开。
  
  #### 2.3.3 for循环
  for循环可以对任何提供迭代器(iterator)的对象进行遍历。
  ```
  fun array1(){
      for (item in 0..3){
          println("item=$item")
      }
  }
  
  fun array2(){
      for (item in 4 until 6){
          println("item=$item")
      }
  }
  
  fun main(args:Array<String>){
      array1()
      array2()
  }
  ```
  注意：1. until不包含末尾元素的区间 2. 使用..包含头和尾元素
  
  #### 2.3.4 while循环
  while语句与Java中的一致
  ```
  fun array(){
      var x = 5;
      while (x>1){
          println(x)
          --x
      }
  }
  fun main(args:Array<String>){
      array()
  }
  ```
  
  #### 2.3.5 标签(label)
  在Kotlin中任何表达式都可以用标签来标记。标签的格式为标识符后跟@符号，可以用Label标签来控制return,break或continue语句的跳转行为.
  ```
  fun array(){
      val intArray = intArrayOf(1,2,3,4,5)
      intArray.forEach here@{
          if(it==3) return@here
          println(it)
      }
  }
  fun main(args:Array<String>){
      array()
  }
  ```
  #### 2.3.6 throw表达式
  在Kotlin中throw是表达式，它的类型是特殊类型Nothing,该类型没有值。
  ```
  fun fail2(msg: String):Nothing{
      throw IllegalAccessException(msg)
  }
  
  fun main(args:Array<String>){
      fail2("xxxxx")
  }
  ```
  如果把一个throw表达式的值赋给一个变量，需要显式声明类型为Nothing
  ```
  fun main(args:Array<String>){
      //val ex =throw Exception("xxxxxxx") 需要显示声明类型为Nothing
      val ex :Nothing = throw Exception("xxxxxxxx")
  }
  ```
  
  ### 2.4 操作符
  ![dbdb4ef5.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\dbdb4ef5.png)
  
  ## 3 类型系统与可空类型
  
  ### 3.1 Kotlin的类型系统
  在java中原始类型有：boolean,char,byte,short,int,long,float,double.
  相应的包装类型:Boolean,Character,Byte,Short,Integer,Long,Float,Double.
  
  在Kotlin中去掉了原始类型，只有包装类型，**编译器在编译代码的时候，会自动优化性能，把对应的包装类型拆箱为原始类型。**
  Kotlin系统类型分为可空类型和不可空类型。Kotlin中引入了可空类型，把有可能为null的值单独用可空类型来表示。
  ![a030be1e.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\a030be1e.png)
  通过这样显式地使用可空类型，并在编译期作类型检查，大大降低了出现空指针异常的概率。
  
  在Kotlin中的数字类型，不可空类型与Java中原始的数字类型对应。如图所示：
  ![6852b611.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\6852b611.png)
  
  在Kotlin中的对应的可空数字类型就相当于Java中的装箱数字类型。如图所示:
  ![1b4e7fe6.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\1b4e7fe6.png)
  
  在Kotlin中等于号使用的说明：
  ![381afe22.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\381afe22.png)
  
  在Kotlin中对于数组的定义不在使用T[]的语法，而是直接使用Array类型代表数组类型，其中包括get,set,size方法。
  如下是8中新数组类型的定义：
  ```
  val square1 :BooleanArray = booleanArrayOf(true,false)
      val square2 :ByteArray = byteArrayOf(0x1,0x2,0x3)
      val square3 :CharArray = charArrayOf('1','2','3')
      val square4 :DoubleArray = doubleArrayOf(1.1,1.2,1.3)
      val square5 :FloatArray = floatArrayOf(1.1f,1.2f,1.3f)
      val square6 :IntArray = intArrayOf(1,2,3,4,5,6)
      val square7 :LongArray = longArrayOf(1,2,3,4,5,6,7)
      val square8 :ShortArray = shortArrayOf(1,2,3,4,5,6,7,8)
  ```
  ### 3.2 安全操作符
  Kotlin正如很多现代编程语言一样是空安全的。因为我们需要通过，一个可空类型符号“T?”来明确地指定一个对象类型T是否能为空。
  
  #### 3.3 安全调用符"?"
  在Kotlin中我们不能直接使用可空的变量/方法来调用其属性或者方法。
  ```
   var nullable :String?= null
      println(nullable?.length)
      nullable = "abc"
      println( nullable?.length)
  ```
  #### 3.4 非空断言"!!"
  Kotlin中提供了断言操作符“!!”,使得可空类型对象可以调用成员方法或者属性。
  ```
   var nullableStr :String ?= null
      println(nullableStr!!.length)
  ```
  注意：如果遇到空指针会直接抛出异常
  
  #### 3.5 Elvis运算符"?:"
  使用Elvis操作符“?:”来给定一个在null情况下的替代值：
  ```
  var nullableStr :String ?= null
  println(nullableStr?:"abc")
  ```
  
  ### 3.3 特殊类型
  Kotlin中的特殊类型有Unit,Nothing,Any及其对应的可空类型Unit?,Nothing?,Any?
  
  #### 3.3.1 Unit类型
  Kotlin里没有Void,所有函数都有返回类型,即在没有返回值的情况下会返回Unit类型,以下是返回Unit的写法：
  ![4582411f.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\4582411f.png)
  Unit的父类是Any,如果是一个可空的Unit?,那么父类型是Any?.
  ![f32a3c1c.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\f32a3c1c.png)
  
  #### 3.3.2 Nothing与Nothing?类型
  Kotlin中Nothing类型的表达式计算结果永远不会返回，相当于Java中的void，而Unit类型表达式计算结果的返回类型是Unit.
  Nothing?类型的表达式只能赋值为null,可被用作任何可空类型的空引用。
  
  #### 3.3.3 Any与Any?类型
  Any?是可空类型层次的根,Any?是Any的超集,Any?是Kotlin类型层次结构的最顶端，
  ![9b24d879.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\9b24d879.png)
  
  注意：1.Any是所有非空类型的根类型,2.Any?才是所有类型（可空和非空类型）的根类型。
  
  ### 3.4 类型检测与类型转换
  Kotlin在运行时通过使用is操作符或其否定形式!is来检查对象是否符合给定类型。
  
  #### 3.4.1 is运算符
  is运算符可以检查对象A是否与特定的类型X兼容，还可以用来检查一个对象是否属于某数据类型。
  ```
  println("abc" is String)
  println("abc" !is String)
  ```
  ### 3.4 as运算符
  as运算符用于执行引用类型的显示类型转换，如果要转换的类型与指定的类型兼容，转换就会成功进行;
  如果类型不兼容，使用as?运算符就会返回null
  
  注意：在Kotlin中，父类是禁止转换为子类型的。
  
  ## 4. 类与面向对象编程
  ![7cbb4cae.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\7cbb4cae.png)
  ### 4.1 声明类
  #### 4.1.1 空类型
  使用class关键字声明类，我们可以声明一个什么都不干的类。
  ```
  class AnEmptyClass
  fun main(args:Array<String>){
      val anEmptyClass = AnEmptyClass()
      println(anEmptyClass)
      println(anEmptyClass is AnEmptyClass)
      println(anEmptyClass::class)
  }
  ```
  #### 4.1.2 声明类和构造函数
  在Kotlin中,我们可以在声明类的时候同时声明构造函数，语法格式是在类的后面使用括号包含构造函数的参数列表
  ```
  class Person(var name:String,var age:Int,var sex:String){
      override fun toString(): String {
          return "Person(name='$name,age=$age,sex='$sex')"
      }
  }
  
  fun main(args:Array<String>){
      val person = Person("jack",29,"M")
      println("person=${person}")
  }
  ```
  通过使用lateinit关键字对，等构造实例对象的时候再去初始化属性值;
  ```
  class Person(){
      lateinit var name :String
      var age:Int =0;
      lateinit var sex:String
      override fun toString(): String {
          return "Person(name='$name',age=$age,sex='$sex')"
      }
  }
  
  fun main(args:Array<String>){
      val person = Person()
      person.name="Jack"
      person.age = 29
      person.sex = "M"
      println("person = ${person}")
  }
  ```
  如果声明一个具有多种构造方式的类，可以使用constructor关键字声明构造函数。
  ```
  class Person(){
      lateinit var name :String
      var age:Int =0;
      lateinit var sex:String
  
      constructor(name:String):this(){
          this.name=name
      }
      constructor(name: String,age:Int):this(){
          this.name=name
          this.age = age
      }
      constructor(name:String,age:Int,sex:String):this(){
          this.name = name
          this.age = age
          this.sex = sex
      }
      override fun toString(): String {
          return "Person(name='$name',age=$age,sex='$sex')"
      }
  }
  
  fun main(args:Array<String>){
      val person1 = Person("Jack")
      person1.sex="man"
      println("person1 = ${person1}")
  
      val person2 = Person("mary",16)
      person2.sex="girl"
      println("person2= ${person2}")
  
      val person3 = Person("kang",18,"girl")
      println("person3=${person3}")
  }
  ```
  注意：lateinit关键字不能原始类型。
  
  ### 4.2 抽象类与接口
  
  #### 4.2.1 抽象类与抽象成员
  在Kotlin中一个类的成员包括属性和函数，抽象类的成员也必须是抽象的，需要使用abstract关键字修饰。
  ```
  abstract class Shape{
      abstract var width:Double
      abstract var heigth:Double
      abstract var radisu:Double
      abstract fun area():Double
      
          fun onClick(){  
          println("I am Clicked!")
      }
  
      open fun openOnClick(){
          println("I am Clicked!")
      }
      
  }
  ```
  **其中父类的onClick()函数默认是final的，不可被覆盖重写。如果想要开发给子类重新实现这个函数。
  可以在前面加上open关键字。**
  
  继承Shape的方法如下：
  ```
  class Rectangle(override var width:Double,override var heigth:Double,
                   override var radisu:Double):Shape(){
      override fun area():Double{
          return heigth*width
      }
  
      override fun openOnClick() {
          println("Rectangle 重写了openOnClick方法")
      }
  }
  
  class Circle(override var width: Double,override var heigth: Double,
               override var radisu: Double):Shape(){
      override fun area(): Double {
          return heigth*width
      }
  
      override fun openOnClick() {
          println("Circle 重写了openOnClick方法")
      }
  }
  
  fun main(args:Array<String>){
      val r = Rectangle(3.0,4.0,0.0)
      println(r.area())
      r.onClick()
      r.openOnClick()
      val c = Circle(0.0,0.0,4.0)
      println(c.area())
      c.onClick()
      c.openOnClick()
  }
  
  ```
  注意：
  1. 如果实现的是抽象类其成员也必须是抽象的，需要使用abstract关键字修饰。
  2. 父类的函数中默认是final不能被重写的，如果需要重写则在前面加上open关键字。
  3. 能够继承父类的public和protected成员变量。
  4. 不能继承父类的private成员变量。
  5. 能够继承父类的public和protected成员变量。
  6. 对于子类可以继承的父类成员变量，如果在子类中出现了同名称的成员变量，则会发生隐藏现象，即子类的成员变量会屏蔽掉父类的同名成员变量。如果要在子类中访问父类的同名成员变量，需要使用super关键字进行引用。
  #### 4.2.2 接口
  Kotlin中使用interface作为接口的关键词:
  ```
  interface ProjectService{
      val name:String
      val owner:String
      fun save(project:ProjectService)
      fun print(){
          println("I am project")
      }
  }
  
  class ProjectServiceImpl(override val name: String, override val owner: String) :ProjectService {
      override fun save(project: ProjectService) {
  
      }
  
      override fun print() {
          println("ProjectServiceImpl 重写了print方法")
      }
  }
   
  ```
  注意：
  1. 接口中可以对方法有具体的实现。
  2. 与抽象类的相比，接口可以直接重写方法的具体实现。
  3. 一个类智能存在一个父类，但是接口不同，一个类可以同时实现多个接口。
  
  ### 4.3 object对象
  Kotlin中没有静态属性和方法，但是可以使用关键字object声明一个object单例对象。
  ```
  //声明对象类型User
  object user{
      val username:String ="admin"
      val password:String ="admin"
      fun hello(){
          println("Hello, Object !")
      }
  }
  
  //与java静态变量和方法调用方式一样。
  fun main(args:Array<String>){
      println(user.password)
      println(user.username)
      user.hello()
  }
  
  ```
  ### 4.5 数据类
  替代java中的get/set方法。
  使用关键字为data class创建一个只包含数据的类。
  
  ```
  data class LoginUser(val username:String,val password:String)
  
  fun main(args:Array<String>){
     
      val loginUser = LoginUser("zhouwei","zhouwei")
      val (username,password) = loginUser   //解构声明
      println("username = ${username},password = ${password}")
  }
  ```
  注意：
  1. 主构造函数至少包含一个参数
  2. 参数必须表示为val或者val
  3. 不能为abstrack,open,sealed或者inner
  4. 不能继承其他类
  
  ### 4.6 枚举
  Kotlin中使用enum class关键字来声明一个枚举类。
  ```
  enum class Direction {
      NORTH,SOUTH,WEST,EAST
  }
  ```
  Kotlin中的枚举类可以被初始化
  ```
  enum class Color(val rgb:Int) { //声明一个带构造参数的枚举类
      RED(0xFF0000),
      GREEN(0x00FF00),
      BLUE(0x0000FF)
  }
  
  val tempColor = Color.GREEN
      println("tempColor=${tempColor},RGB=${tempColor.rgb},name=${tempColor.name},ordinal=${tempColor.ordinal}")
  ```
  注意： 枚举类有两个内置的属性
  1. public final val name:String 表示枚举对象的值
  2. public final val ordinal:Int 表示下标位置
  
  ### 4.7 内部类
  
  #### 4.8.1 普通嵌套类
  Kotlin中，类可以嵌套，一个类可以嵌套在其他类中，而且可以嵌套多层。
  ```
  class tempInnerDemo{
      class oneInner{
          private val zero :Int = 0
          val one:Int =1
          class twoInner{
              fun getTwo()=2
              class threeInner{
                  val three = 3
                  fun getFour()=4
              }
          }
      }
  }
  fun main(args:Array<String>){
      val one = tempInnerDemo.oneInner().one
      val two = tempInnerDemo.oneInner.twoInner().getTwo()
      val three = tempInnerDemo.oneInner.twoInner.threeInner().getFour()
      println("one=${one},two=${two},three=${three}")
  }
  ```
  注意：普通嵌套类没有持有外部的引用，所以是无法访问外部类变量。
  
  #### 4.8.2 嵌套内部类
  如果一个类Inner想要访问外部类Outer中的成员，可以在这个类前面添加修饰符inner。
  内部类会带有一个对外部类的对象引用。
  ```
  class tempInnerDemo{
      class oneInner{
          private val zero :Int = 0
          val one:Int =1
          inner class threeInner{
              val three = 3
              fun getFour()=4
              fun accessOuter(){
                  println(one)
              }
          }
      }
  }
  fun main(args:Array<String>){
      val one = tempInnerDemo.oneInner().one
      val two = tempInnerDemo.oneInner().threeInner().accessOuter()
      val three = tempInnerDemo.oneInner().threeInner().getFour()
      println("one=${one},two=${two},three=${three}")
  }
  ```
  #### 4.8.3 匿名内部类
  匿名内部类就是没有名字的内部类。匿名内部类也可以访问外部类的变量。
  ```
  class NestedClassesDemo{
      class AnoymousInnerClassDemo{
          var isRunning = false
          fun doRun(){
              Thread(object :Runnable{ //匿名内部类
                  override fun run() {
                      TODO("Not yet implemented")
                  }
              }).start()
          }
      }
  }
  ```
  ## 5 函数与函数式编程
  ### 5.1 声明函数
  Kotlin中使用fun关键字来声明函数。
  ![f0e153be.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\f0e153be.png)
  在kotlin中函数也可以当做变量来使用。
  ```
  //sum的类型是一个函数类型的变量
  val sum = fun(x:Int,y:Int):Int{return x+y}
  //直接使用sum这个函数字面值来调用函数
  sum(1,1)
  ```
  当然也可以直接带上函数名字来声明一个函数：
  ```
  fun multiply(x:Int,y:Int):Int{
    return x*y
  }
  multyply(2,2)
  ```
  ### 5.2 高阶函数
  
  ### 5.3 Kotlin中的特殊函数
  
  ## 6 扩展函数与属性
  在Kotlin里，可以自由扩展任何类的方法和属性。在不修改原类的情况，Kotlin能给一个类扩展新功能而无需继承该类。
  ### 6.1 扩展函数
  Kotlin中提供了使用非常简单的扩展函数功能。我们可以为现有的类自由添加自定义的函数。
  
  #### 6.1.2 给String类扩展两个函数
  例如给String类扩展两个函数
  ```
  fun String.firstChar(): String {
      if (this.length == 0) {
          return ""
      }
      return this[0].toString();
  }
  fun String.lastChar(): String {
      if (this.length == 0){
          return ""
      }
      return this[this.length-1].toString()
  }
  
  fun main() {
      val str ="abc"
      println(str.firstChar())
      println(str.lastChar())
  }
  
  ```
  扩展函数的语法：
  ![52e723fa.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\52e723fa.png)
  
  #### 6.1.2 给List类扩展一个过滤函数
  filter()函数的签名
  ![73bd5f08.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\73bd5f08.png)
  ```
  fun<T> List<T>.filter(predicate:(T)->Boolean):MutableList<T>{
      val result = ArrayList<T>()
      this.forEach {
          if(predicate(it)){
              result.add(it)
          }
      }
      return result
  }
  
  fun main() {
      val list = mutableListOf(1,2,3,4,5,6)
      val result = list.filter {
          it%2==1
      }
      println(result)
  }
  ```
  ### 6.2 扩展属性
  Kotlin除了扩展一个类的函数，还可以扩展类属性。
  ![38f98eae.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\38f98eae.png)
  ```
  var <T> MutableList<T>.firstElement: T
      get() {
          return this[0]
      }
      set(value) {
          this[0] = value
      }
  
  var <T> MutableList<T>.lastElement: T
      get() {
          return this[this.size - 1]
      }
      set(value) {
          this[this.size - 1] = value
      }
  
  val list = mutableListOf(1,2,3,4,5,6,7)
      println("list =${list}")
      println(list.firstElement)
      println(list.lastElement)
  
      list.firstElement = -1
      list.lastElement = -7
  
      println("list = ${list}")
      println(list.firstElement)
      println(list.lastElement)
  ```
  注意：扩展属性允许定义在类或者kotlin文件中，不允许定义在函数中。
  
  ### 6.3 扩展中的this关键字
  Kotlin中使用this表达式
  1. 在类的成员函数中，this指向这个类的当前对象实例。
  2. 在扩展函数中，或带接收者的函数字面值中，this代表调用函数时，在点号左侧传递的接受者参数。
  3. 如果this没有限定符，那么它指向包含当前代码的最内层范围。如果想要指向其他范围内的this,需要使用标签限定符。
  
  ```
  this.forEach{
    if(predicate(it)){
       result.add(it)
    }
  }
  ```
  
  ## 7 集合类
  Kotlin的集合类分为：可变集合类(Mutable)与不可变集合类(Immutable)。
  ![fb82c159.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\fb82c159.png)
  - List容器中的元素以线性方式存储，集合中可以存放重复对象。列表中的元素是有序地排列。
  - Set集容器的元素无序，不重复。
  - Map映射中持有的是“键值对”对象，每一个对象都包含一对键值K-V对象。Map映射容器中存储的每个对象都有一个相关的关键字(Key)对象，关键字是唯一的。
  ### 7.1 Kotlin集合类继承层次
  Kotlin中集合类接口的结构层次
  ![71eb9c57.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\71eb9c57.png)
  各个接口说明
  ![0c98ef32.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\0c98ef32.png)
  
  ### 7.2 不可变集合类
  - List列表分为只读不可变的List和可变MutableList(可写入，删除数据)
  - Set集也分为不可变Set和可变MutableSet(可写入，删除数据)
  - Map也分为只读Map和可变MutableMap(可写入，删除数据)
  ![3f17fb72.png](:storage\\4c76f597-4219-44d8-8fdb-96d95f2e5eec\\3f17fb72.png)
'''
linesHighlighted: [
  23
]
isStarred: false
isTrashed: false
