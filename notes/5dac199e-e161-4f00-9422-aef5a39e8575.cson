createdAt: "2020-07-11T14:24:13.654Z"
updatedAt: "2020-07-13T14:41:44.958Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "JAVAScript 进阶教程"
tags: []
content: '''
  # JAVAScript 进阶教程
  [TOC]
  
  ## 1. Web APIS和JS基础关联性
  
  ### 1.2 JS基础阶段以及Web APIs阶段
  JS 基础阶段：
  - 我们学习的是ECMAScript标准规定的基本语法
  - 要求同学们掌握JS基础语法
  - 只学习基本语法，做不了常用的网页交互效果
  - 目的是为了JS后面的课程打基础，做铺垫
  
  Web APIs阶段
  - Web APIs是W3C组织的标准
  - Web APIs我们主要学习DOM和BOM
  - Web APIs是我们JS所独有的部分
  - 我们主要学习页面交互功能
  - 需要使用JS基础的课程内容做基础
  
  JS基础学习ECMAScript基础语法为后面做铺垫，Web APIS是JS的应用，
  大量使用JS基础语法做交互效果。
  
  
  ### 1.3 API和Web API
  API:
  API(Application Programming interface,应用程序编程接口)是一些预定义的函数，目的是提供应用程序与发开人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。
  
  Web API:
  Web API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)。现阶段我们主要针对于浏览器讲解常用的API，主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框，直接使用Alert
  **注意** 
  MDN详细API:[Web API 接口参考 \\| MDN](https://developer.mozilla.org/zh-CN/docs/Web/API)
  
  总结：
  1. API是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了。不必纠结内部如何实现。
  2. Web API主要针对浏览器提供的接口，主要针对浏览器做交互效果。
  3. Web API一般都有输入和输出（函数的传参和返回值），Web API很多都是方法（函数）
  4. 学习Web API可以结合前面学习内置对象方法的思路学习。
  
  ## 2 学习DOM
  
  ### 2.1 DOM简介
  文档对象模型（Document ObjectModel,简称DOM）,是W3C组织推荐的处理可扩展标记语言（HTML或者）
  
  ### 2.2 DOM树
  ![f1bf9c96.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\f1bf9c96.png)
  
  
  ### 2.3 获取元素
  #### 2.3.1 根据ID获取
  ```
  <div id="time">2020-12-12</div>
      <script>
          var timer=document.getElementById('time');
          console.log(timer);
          console.log(typeof timer);
          console.dir(timer);
      </script>
  ```
  **注意**
  1.因为我们文档页面从上往下加载，所以先得有标签，所以我们script写到标签的下面。
  2.get获得element元素by通过驼峰命名法。
  3.参数id是大小写敏感的字符串。
  4.返回的是一个元素对象。
  5.console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法。
  
  #### 2.3.2 根据标签名获取（重要）
  使用getElementsByTagName()方法可以返回带有指定标签名的对象集合。
  
  ```
  <ul>
          <li>你好1</li>
          <li>你好2</li>
          <li>你好3</li>
          <li>你好4</li>
          <li>你好5</li>
    </ul>
      <script>
          //1.返回的是 获取过来元素对象的集合，以伪数组的形式存储的。
          var lis=document.getElementsByTagName('li');
          console.log(lis);
          console.log(lis[0]);
          //2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式。
          for(var i=0;i<lis.length;i++){
              console.log(lis[i]);
          }
          //3.如果页面中只有一个li, 返回的还是伪数组的形式
          //4.如果页面中没有这个元素返回的空的伪数组的形式
    </script>
  ```
  获取某个元素(父类)内部所有指定标签名的子元素。
  ```
   <ol id="ol">
          <li>你好1</li>
          <li>你好2</li>
          <li>你好3</li>
          <li>你好4</li>
          <li>你好5</li>
      </ol>
      <script>
          var ol =document.getElementById('ol');
          console.log(ol.getElementsByTagName('li'));
      </script>
  ```
  **注意**
  父元素必须是单个对象（必须指明是哪个一个元素对象）.获取的时候不包括父元素自己。
  
  
  #### 2.3.3 通过HTML5新增的方法获取
  ```
  1.document.getElementsByClassName('类名'); //根据雷鸣返回元素对象集合
  2.document.querySelector('选择器'); //根据指定选择器返回第一个元素对象
  需要注意选择器需要加符号例如：.box(class), #nav(id)
  3.document.querySelectorAll('选择器'); //根据指定选择器返回所有元素集合
  ```
  
  #### 2.3.4 特殊元素获取
  获取body元素
  ```
  document.body //返回body元素对象
  ```
  获取html元素
  ```
  document.documentElement //返回html元素对象
  ```
  
  ### 2.4 事件基础
  
  #### 2.4.1 事件概述
  JavaScript使我们有能力创建动态页面，而事件是可以被JavaScript侦测到的行为。
  1.事件有三部分组成：事件源，事件类型，事件处理程序
    1) 事件源 事件被触发的对象
    2) 事件类型 如何触发 什么事件 比如鼠标点击（onclick）还是鼠标经过还是键盘按下。
    3) 事件处理程序 通过一个函数赋值的方式完成
  
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
