createdAt: "2020-07-11T14:24:13.654Z"
updatedAt: "2020-08-09T10:16:44.979Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "JAVAScript 进阶教程"
tags: []
content: '''
  # JAVAScript 进阶教程
  [TOC]
  
  ## 1. Web APIS和JS基础关联性
  
  ### 1.2 JS基础阶段以及Web APIs阶段
  JS 基础阶段：
  - 我们学习的是ECMAScript标准规定的基本语法
  - 要求同学们掌握JS基础语法
  - 只学习基本语法，做不了常用的网页交互效果
  - 目的是为了JS后面的课程打基础，做铺垫
  
  Web APIs阶段
  - Web APIs是W3C组织的标准
  - Web APIs我们主要学习DOM和BOM
  - Web APIs是我们JS所独有的部分
  - 我们主要学习页面交互功能
  - 需要使用JS基础的课程内容做基础
  
  JS基础学习ECMAScript基础语法为后面做铺垫，Web APIS是JS的应用，
  大量使用JS基础语法做交互效果。
  
  
  ### 1.3 API和Web API
  API:
  API(Application Programming interface,应用程序编程接口)是一些预定义的函数，目的是提供应用程序与发开人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。
  
  Web API:
  Web API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)。现阶段我们主要针对于浏览器讲解常用的API，主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框，直接使用Alert
  **注意** 
  MDN详细API:[Web API 接口参考 \\| MDN](https://developer.mozilla.org/zh-CN/docs/Web/API)
  
  总结：
  1. API是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了。不必纠结内部如何实现。
  2. Web API主要针对浏览器提供的接口，主要针对浏览器做交互效果。
  3. Web API一般都有输入和输出（函数的传参和返回值），Web API很多都是方法（函数）
  4. 学习Web API可以结合前面学习内置对象方法的思路学习。
  
  ## 2 学习DOM
  
  ### 2.1 DOM简介
  文档对象模型（Document ObjectModel,简称DOM）,是W3C组织推荐的处理可扩展标记语言（HTML或者）
  
  ### 2.2 DOM树
  ![f1bf9c96.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\f1bf9c96.png)
  
  
  ### 2.3 获取元素
  #### 2.3.1 根据ID获取
  ```
  <div id="time">2020-12-12</div>
      <script>
          var timer=document.getElementById('time');
          console.log(timer);
          console.log(typeof timer);
          console.dir(timer);
      </script>
  ```
  **注意**
  1.因为我们文档页面从上往下加载，所以先得有标签，所以我们script写到标签的下面。
  2.get获得element元素by通过驼峰命名法。
  3.参数id是大小写敏感的字符串。
  4.返回的是一个元素对象。
  5.console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法。
  
  #### 2.3.2 根据标签名获取（重要）
  使用getElementsByTagName()方法可以返回带有指定标签名的对象集合。
  
  ```
  <ul>
          <li>你好1</li>
          <li>你好2</li>
          <li>你好3</li>
          <li>你好4</li>
          <li>你好5</li>
    </ul>
      <script>
          //1.返回的是 获取过来元素对象的集合，以伪数组的形式存储的。
          var lis=document.getElementsByTagName('li');
          console.log(lis);
          console.log(lis[0]);
          //2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式。
          for(var i=0;i<lis.length;i++){
              console.log(lis[i]);
          }
          //3.如果页面中只有一个li, 返回的还是伪数组的形式
          //4.如果页面中没有这个元素返回的空的伪数组的形式
    </script>
  ```
  获取某个元素(父类)内部所有指定标签名的子元素。
  ```
   <ol id="ol">
          <li>你好1</li>
          <li>你好2</li>
          <li>你好3</li>
          <li>你好4</li>
          <li>你好5</li>
      </ol>
      <script>
          var ol =document.getElementById('ol');
          console.log(ol.getElementsByTagName('li'));
      </script>
  ```
  **注意**
  父元素必须是单个对象（必须指明是哪个一个元素对象）.获取的时候不包括父元素自己。
  
  
  #### 2.3.3 通过HTML5新增的方法获取
  ```
  1.document.getElementsByClassName('类名'); //根据雷鸣返回元素对象集合
  2.document.querySelector('选择器'); //根据指定选择器返回第一个元素对象
  需要注意选择器需要加符号例如：.box(class), #nav(id)
  3.document.querySelectorAll('选择器'); //根据指定选择器返回所有元素集合
  ```
  
  #### 2.3.4 特殊元素获取
  获取body元素
  ```
  document.body //返回body元素对象
  ```
  获取html元素
  ```
  document.documentElement //返回html元素对象
  ```
  
  ### 2.4 事件基础
  
  #### 2.4.1 事件概述
  JavaScript使我们有能力创建动态页面，而事件是可以被JavaScript侦测到的行为。
  1.事件有三部分组成：事件源，事件类型，事件处理程序
    1) 事件源 事件被触发的对象
    2) 事件类型 如何触发 什么事件 比如鼠标点击（onclick）还是鼠标经过还是键盘按下。
    3) 事件处理程序 通过一个函数赋值的方式完成
  
  ### 2.5 操作元素
  JavaScript的DOM操作可以改变网页内容，结构和样式，我们可以利用DOM操作元素来改变元素里面的内容，属性等。
  1.改变元素内容
  ```
  var btn=document.querySelector('button');
  var div=document.querySelector('div');
  btn.onclick = function(){
    div.innerText='2019-6-6';
  }
  ```
  从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉,即纯文本插入。
  ```
  var div =document.querySelector('div');
  div.innerHTML ='<strong>今天是：</strong>2019';
  ```
  起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行,即html的形式插入。
  
  **注意** 只能针对div标签里面的内容，表单里面的值是通过value来修改。
  2.常用元素的属性操作
  src,href,id,alt,title.
  ```
  <button id='tlp'>特朗普</button>
      <button id='xll'>希拉里</button>
      <img src="1.jpg" alt="123" title="特朗普">
      <script>
          var tlp=document.getElementById('tlp');
          var xll=document.getElementById('xll');
          var img=document.querySelector('img');
          tlp.onclick=function(){
              img.src='1.jpg';
              img.title='特朗普';
          }
          xll.onclick=function(){
              img.src='2.jpg';
              img.title='希拉里'; 
          }
      </script>
  ```
  #### 2.5.3 表单元素的属性操作
  利用DOM可以操作如下表单元素的属性：
  type,value,checker,selected,disabled
  ```
  var btn =document.querySelector('button');
  var input =document.querySelector('input');
  btn=onclick=function(){
   input.value='被点击了';
   this.disable=true;
  }
  ``` 
  
  #### 2.5.4 样式属性操作
  可以通过JS修改元素的大小，颜色，位置等样式。
  1.element.style 行内样式操作
  
  ```
  <div></div>
      <script>
          //1.获取元素
          var div=document.querySelector('div');
          //2.注册事件，处理程序
          div.onclick = function(){
              this.style.backgroundColor ='purple';
              this.style.width ='250px'; //会加到行内样式中。
          }
      </script>
  ```
  **注意**
  1).JS里面的样式采取驼峰命名法，比如fontSize,backgroundColor
  2).JS修改style样式操作，产生的是行内样式，css权重比较高（重要）
  
  2.element.className 类名样式操作
  ```
  <style>
          .change{
              background-color :purple;
              color: #fff;
              font-size:25px;
              margin-top: 100px;
          }
      </style>
  <div>文本</div>
      <script>
          var text=document.querySelector('div');
          text.onclick=function(){
              this.className='change';
          }
      </script>
  ```
  1. 如果样式修改较多，可以采取操作类名方式更改元素样式。
  2. class因为是个保留字，因此使用className来操作元素类名属性。
  3. className 会直接更改元素的类名，会覆盖原先的类名。
  
  #### 2.5.5 获取焦点
  获取焦点：onfocus
  失去焦点：onblur
  ```
  <input type="text" value="手机">
      <script>
          var text=document.querySelector('input');
          text.onfocus = function (){
              if(this.value==='手机'){
                  this.value='';
              }
              this.style.color ='#333';
          }
          text.onblur =function (){
              if(this.value===''){
                  this.value='手机';
              }
              this.style.color='#999';
          }
      </script>
  ```
  获取鼠标焦点：onmouseover
  失去鼠标焦点：onmouseout
  
  ```
  <script>
           var child =document.querySelector('tbody').querySelectorAll('tr');
           for(var i = 0; i < child.length ; i++){
               child[i].onmouseover = function(){
                  this.className = 'bg';
               }
               child[i].onmouseout =function(){
                   this.className = '';
               }
           }        
      </script>
  ```
  
  #### 2.5.6 操作元素总结
  ![6a24e78e.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\6a24e78e.png)
  
  #### 2.5.7 表单全选与取消全选
  ```
   <script>
          var thead =document.getElementById('j_cbAll');
          var tbody= document.getElementById('j_tb').querySelectorAll('input');
          thead.onclick=function(){
              for(var i=0;i<tbody.length;i++){
                  tbody[i].checked=this.checked;
              }
          }
          for(var i=0;i<tbody.length;i++){    
              tbody[i].onclick=function(){
                  var flag=true;
                  for(var i=0 ;i < tbody.length; i++){
                      if(!tbody[i].checked){
                          flag=false;
                          break;
                      }
                  }
                  thead.checked=flag;
              }
          }
      </script>
  ```
  #### 2.5.8 自定义属性的操作
  1. 获取属性值
  - element.属性 获取属性值
  - element.getAttribute('属性')
  
  2. 区别
  - element.属性 获取内置属性值（元素本身自带的属性）
  - element.getAttribute('属性');主要获取自定义的属性
  
  3. 设置属性值
  - element.属性 ='值' 设置内置属性值
  - element.setAttribute('属性'，'值');
  
  4. 区别:
  - element.属性 设置内置属性值
  - element.setAttribute('属性')；主要设置自定义的属性
  
  5. 移除属性
  - element.removeAttribute('属性')
  
  #### 2.5.9 tab栏切换布局分析（重要）
  ```
   <script>
          var father=document.querySelector('.tab_list');
          var child=father.querySelectorAll('li');
          var tab_con=document.querySelectorAll('.item');
          for(var i=0;i<child.length;i++){
              child[i].setAttribute('index',i);
              child[i].onclick=function(){
                  for(var i=0;i<child.length;i++){
                      child[i].className='';
                  }
                  this.className='current';
                  var index=this.getAttribute('index');
                  console.log(index);
                  for(var i=0;i<tab_con.length;i++){
                      tab_con[i].style.display='none';
                  }
                  tab_con[index].style.display='block';
              }
          }
  
      </script>
  ```
  
  #### 2.5.10 H5自定义属性
  自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。
  自定义属性获取是通过getAttribute('属性')获取。
  **H5规定自定义属性必须以data-开头做为属性名并且赋值**
  比如
  ```
  <div data-index="1"></div>
  ```
  或者使用JS设置
  element.setAttribute('data-index',2)
  
  #### 2.5.11 获取H5自定义属性
  1.兼容性获取 element.getAttribute('data-index');
  2.H5新增element.dataset.index 或者element.dataset['index'] ie 11才开始支持。
  
  ### 2.6 节点操作
  
  #### 2.6.1 为什么学节点操作
  ![dd83efbb.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\dd83efbb.png)
  
  #### 2.6.2 节点概述
  网页中的所有内容都是节点（标签，属性，文本，注释等），在DOM中，节点使用node来表示。
  HTML DOM树种的所有节点均可通过JavaScript进行访问。所有HTML元素（节点）均可被修改，也创建和删除
  ![bcc5a16c.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\bcc5a16c.png)
  一般地，节点至少用于nodeType(节点类型)，nodeName(节点名称)和nodeValue(节点值)这三个基本属性。
  - 元素节点 nodeType 为1
  - 属性节点 nodeType 为2
  - 文本节点 nodeType 为3
  **在实际开发中节点操作主要操作的是元素节点**
  
  #### 2.6.3节点层级
  利用DOM树可以把节点划分为不同的层级关系，常见的是父子兄层级关系。
  1.父级节点
  ```
  node.parentNode
  ```
  - parentNode属性可返回某节点的父节点，注意是最近的一个父节点。
  - 如果指定的节点没有父节点则返回null
  
  2.子节点
  方式1：（不推荐）
  ```
  parentNode.childNodes(标准)
  ```
  parentNode.childNodes返回包含指定节点的子节点的集合，该集合为即时更新的集合。
  **注意**
  返回值里面包含了所有的子节点，包括元素节点，文本节点等。
  如果只想要获得里面的元素节点，则需要专门处理。所以一般不提倡使用childNodes.
  ```
  var ul=document.querySelector('ul');
  for(var i=0,i<ul.childNodes.length;i++){
    if(ul.childNodes[i].nodeType==1){
        console.log(ul.childNodes[i]) //是元素节点
    }
  }
  
  ```
  方式2：（推荐）
  ```
  parentNode.children
  ```
  parentNode.children是一个只读属性，返回所有子元素节点。它只返回子元素节点，其余节点不返回。
  虽然children是一个非标准，但是得到了各个浏览器的支持。
  
  #### 2.6.4 新浪下拉菜单
  ```
  <script>
          var father = document.querySelector('.nav');
          var child = father.children;
          console.log(child);
          for(var i=0;i<child.length;i++){
              child[i].onmouseover=function(){
                  this.children[1].style.display='block';
              }
              child[i].onmouseout=function(){
                  this.children[1].style.display='none';
              }
          }
  
      </script>
  ```
  
  #### 2.6.5 兄弟节点
  ```
  node.nextSibling
  ```
  nextSibing 返回当前元素的下一个兄弟节点，找不到则返回null.同样，也是包含所有的节点。
  ```
  node.previousSibling
  ```
  previousSibling 返回当前元素上一个兄弟节点，找不到则返回null.同样，也是包含所有的节点。
  ```
  node.nextElementSibling (重要)
  ```
  nextElementSibling返回当前元素下一个兄弟元素节点，找不到则返回null
  ```
  node.previousElementSibling
  ```
  previousElementSibling返回当前元素上一个兄弟节点，找不到则返回null
  
  #### 2.6.6 创建节点
  ```
  document.createElement('tagName')
  ```
  document.createElement()方法创建由tagName指定的HTML元素。因为这些元素原先不存在，
  是根据我们的需求动态生成的，所以我们也称为动态创建元素节点。
  
  #### 2.6.7 添加节点
  ```
  node.appendChild(child)
  ```
  node为父级节点，child是子级
  node.appendChild()方法将一个节点添加到指定父节点的字节点列表末尾。
  
  #### 2.6.8 删除节点
  ```
  node.removeChild(child)
  ```
  node.removeChild()方法从DOM中删除一个子节点，返回删除的节点。
  
  #### 2.6.9 删除留言案例
  ```
   <textarea name="" id=""></textarea>
      <button>发布</button>
      <ul>
  
      </ul>
      <script>
          var text=document.querySelector('textarea');
          var btn=document.querySelector('button');
          var ul=document.querySelector('ul');
          btn.onclick=function(){
              if(text.value===''){
                  alert('没有输入');
                  return
              }
              else{
                  //创建节点
                  var li =document.createElement('li');
                  li.innerHTML=text.value+"<a href='javaScript:;'>删除</a>";
                  console.log(li);
                  //追加节点
                  ul.insertBefore(li,ul.children[0])
                  //删除节点
                  var a=document.querySelectorAll('a');
                  for(var i =0;i<a.length;i++){
                      a[i].onclick=function(){
                          ul.removeChild(this.parentNode);
                      }
                  }
              }
          }
  
      </script>
  ```
  
  #### 2.6.10 复制节点
  
  ```
  node.cloneNode()
  ```
  node.cloneNode()方法返回调用该方法的节点的一个副本，也称为克隆节点/拷贝节点
  
  **注意**
  - 如果括号参数为空或者为false,则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点。
  - 如果括号参数为true,则是深度拷贝，会复制节点本身以及里面所有的子节点。
  
  #### 2.6.11 动态生成表格(重点)
  ```
  <body>
      <table cellspacing="0">
          <thead>
              <tr>
                  <th>姓名</th>
                  <th>科目</th>
                  <th>成绩</th>
                  <th>操作</th>
              </tr>
          </thead>
          <tbody>
  
          </tbody>
          <script>
              // 1.先去准备好学生的数据
          var datas = [{
              name: '魏璎珞',
              subject: 'JavaScript',
              score: 100
          }, {
              name: '弘历',
              subject: 'JavaScript',
              score: 98
          }, {
              name: '傅恒',
              subject: 'JavaScript',
              score: 99
          }, {
              name: '明玉',
              subject: 'JavaScript',
              score: 88
          }, {
              name: '大猪蹄子',
              subject: 'JavaScript',
              score: 0
          }];
          //往tbody里面创建行，有几个人我们就创建几行
          var tbody =document.querySelector('tbody');
          for(var i=0;i<datas.length;i++){
              //创建tr行
              var tr=document.createElement('tr');
              tbody.appendChild(tr);
              //行里面创建单元格td，单元格的数量取决于每个对象里面的属性个数
              //for循环遍历对象datas[i]
              for(var j in datas[i]){
                  //创建单元格
                  var td =document.createElement('td');
                  //把对象里面的属性值给td
                  td.innerHTML=datas[i][j];
                  tr.appendChild(td);
              }
              //创建由删除2个字的单元格
              var td = document.createElement('td');
              td.innerHTML='<a href="javascript:;">删除</a>';
              tr.appendChild(td);
          }
          //删除操作开始
          var a =document.querySelectorAll('a');
          for(var i=0;i<a.length;i++){
              a[i].onclick=function(){
                  //点击a删除当前a所在的行(链接的爸爸的爸爸)
                  tbody.removeChild(this.parentNode.parentNode);
              }
          }
          </script>
      </table>
  </body>
  ```
  
  #### 2.6.12 三种动态创建元素区别 （重点）
  - document.write()
  - element.innerHTML
  - document.createElement()
  区别
  1.document.write是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘。
  2.innerHTML是将内容写入某个DOM节点，不会导致页面全部重绘
  3.innerHTML创建多个元素效率跟高（采用数组拼接，不用拼接字符串行）。
  4.createElement()创建多个元素效率稍微低一点点，但是结构更清晰。
  
  ~中间省略 P56~P76
  
  
  ## 3 学习BOM
  
  ### 3.1 BOM概述
  BOM(Browser Object Model)即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window.
  
  BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。
  
  BOM缺乏标准，JavaScript语法的标准化组织是ECMA,DOM的标准化组织是W3C,BOM最初是Netcape浏览器标准的一部分。
  
  #### 3.1.2 BOM与DOM的区别
  DOM：
  - 文档对象模型
  - DOM就是把文档当做一个对象来看待
  - DOM的顶级对象是document
  - DOM主要学习的是操作页面元素
  - DOM是W3C标准规范
  
  BOM：
  - 浏览器对象模型
  - 把浏览器当做一个对象来看待
  - BOM的顶级对象是window
  - BOM学习的是浏览器窗口交互的一些对象
  - BOM是浏览器厂商在各自浏览器上定义的，兼容性较差。
  
  #### 3.1.3 BOM的构成
  BOM比DOM更大，它包含DOM。
  ![e13bf7b6.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\e13bf7b6.png)
  
  window对象是浏览器的顶级对象，它具有双重角色
  - 它是JS访问浏览器窗口的一个接口
  - 它是一个全局对象。定义在全局作用域中的变量，函数都会成为window对象的属性和方法。
  在调用的时候可以省略window,前面学习的对话框都属于window对象方法，如alert(),prompt()等
  
  ### 3.2 window对象常见事件
  
  #### 3.2.1 窗口加载事件1
  ```
  window.onload=function(){}
  或者
  window.addEventListener("load",funcation(){})
  ```
  window.onload是窗口(页面)加载事件，当文档内容完全加载完成后会触发该事件（包括图像，脚本文件,CSS文件）
  - 有了window.onload就可以把JS代码写到页面元素的上方，因为onload是等页面内容全部加载完毕，再去执行处理函数。
  - window.onload传统注册事件方式只能写一次，如果有多个，会以最后一个window.onload为准。
  - 如果使用addEventListener则没有限制。
  ```
  <script>
          window.onload = function(){
              var btn=document.querySelector('button');
              btn.addEventListener('click',function(){
                  alert('点击我');
              })
          }
      </script>
  ```
  
  #### 3.2.2 窗口加载事件2
  ```
  document.addEventListener('DOMContentLoaded',function(){})
  ```
  DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等。
  例如：如果页面的图片很多的话，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，
  必然影响用户的体验。此时用DOMContentLoaded事件比较合适。
  
  #### 3.2.3 调整窗口大小事件
  ```
  window.onresize=function(){}
  或者
  window.addEventListener("resize",funcation(){});
  ```
  window.onresize是调整窗口大小加载事件，当触发时就调用的处理函数。
  **注意**
  - 只要窗口大小发生像素变化，就会触发这个事件。
  - 我们经常利用这个事件完成响应式布局。window.innerWidth当前屏幕的宽度。
  ```
  window.addEventListener('load',function(){
              var div = document.querySelector('div');
              window.addEventListener('resize',function(){
                  console.log(window.innerWidth);
                  console.log('变化了');
                  if(window.innerWidth <=800){
                      div.style.display ='none';
                  }
                  else{
                      div.style.display = 'block';
                  }
              })
          })
  ```
  ### 3.3 定时器
  #### 3.3.1 setTimeout定时器
  setTimeout()方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。
  ```
  window.setTimeout(调用函数，[延迟的毫秒数]);
  ```
  ```
  <script>
          function callback(){
              console.log('爆炸了')
          }
          setTimeout(callback,2000);
      </script>
  ```
  
  #### 3.3.2 停止setTimeout定时器
  ```
  window.clearTimeout(timeout ID)
  ```
  **注意**
  1.window 可以省略
  2.里面的参数就是定时器的标识符
  
  ```
  <button>点击停止定时器</button>
      <script>
          var btn =document.querySelector('button');
          function callback(){
              console.log('爆炸了')
          }
          var timer=setTimeout(callback,5000);
          btn.addEventListener('click',function(){
              clearTimeout(timer);
          })
      </script>
  ```
  #### 3.3.3 setInterval定时器
  ```
  window.setInterval(回调函数，[间隔的毫秒数])；
  ```
  **注意**
  setInterval()方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。
  setTime()延时时间到了，就去调用这个回调函数，只调用一次，就结束了这个定时器。
  
  #### 3.3.4 停止setInterval定时器
  ```
  window.clearInterval(intervalID);
  ```
  clearInterval()方法取消了先前通过调用setInterval()建立的定时器
  **注意**
  1.window可以省略
  2.里面的参数就是定时器的标识符。
  ```
  button class="begin">开启定时器</button>
      <button class="stop">停止定时器</button>
      <script>
          var begin = document.querySelector('.begin');
          var stop1 = document.querySelector('.stop');
          var timer = null;
          begin.addEventListener('click',function(){
              timer =setInterval(function(){
                  console.log('你好吗')
              },1000);
  
          })
  
          stop1.addEventListener('click',function(){
              clearInterval(timer);
          })
      </script>
  ```
  #### 3.3.5 发送短信案例（重要）
  ```
   <button class="begin">发送</button>
      <script>
          var btn =document.querySelector('button');
          var time = 3;
          btn.addEventListener('click',fn);
          function fn(){
              btn.disabled=true;
              var timer=setInterval(function(){
                      if(time === 0){
                          clearInterval(timer);
                          btn.disabled=false;
                          btn.innerHTML="发送";
                          time=3;
                      }else{
                          btn.innerHTML="还剩下"+time+"秒";
                          time--;
                      }
              },1000);
          }
      </script>
  ```
  #### 3.3.6 this指向问题（重要）
  - 全局作用域或者普通函数中this指向全局对象window(注意定时器面的this指向window)
  - 方法调用中谁调用this就指向谁
  - 构造函数中this指向构造函数的实例
  
  ### 3.4 JS执行队列
  JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为JavaScript这门脚本诞生的使命所致。
  JavaScript是为处理页面中用户的交互，以及操作DOM而诞生的，比如我们对某个DOM元素进行添加和删除操作，不能同时进行。
  应该先进行添加，之后再删除。
  
  单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。
  这样所导致的问题是：如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。
  
  #### 3.4.1 同步和异步
  1. 同步任务
  同步任务都在主线程上执行，形成一个执行栈。
  2. 异步任务
  JS的异步是通过回调函数实现的。
  一般而言，异步任务有以下三种类型：
  1.普通事件，如click,resize等
  2.资源加载，如load,error等
  3.定时器，包括setInterval,setTimeout等
  异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）
  
  #### 3.4.2 JS执行机制(重要)
  1.先执行执行栈中的同步任务
  2.异步任务（回调函数）放入任务队列中
  3.一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈,开始执行。
  4.如果继续有异步任务，主线程会从任务队列中取出一个任务，推入主线程处理。（事件循环-event loop）
  ![60c323f3.png](:storage\\5dac199e-e161-4f00-9422-aef5a39e8575\\60c323f3.png)
  
  ### 3.5 Location对象
  #### 3.5.1 location对象的属性
  | location对象属性  | 返回值                           |
  | ----------------- | -------------------------------- |
  | location.href     | 获取或设置整个URL                |
  | location.host     | 返回主机(域名)                   |
  | location.port     | 返回端口号，如果未写返回空字符串 |
  | location.pathname | 返回路径                         |
  | location.search   | 返回参数                         |
  | location.hash     | 返回片段                         |
  |                   |                                  |
  
  #### 3.5.2 5秒后跳转页面
  ```
   <button>点击</button>
      <div></div>
      <script>
          var div= document.querySelector('div');
          var timer=5;
          setInterval(function(){
              if(timer ===0){
                  location.href="http://www.baidu.com"
              }else{
                  div.innerHTML="您将在"+timer+"秒钟之后跳转到首页";
                  timer--;
              }
          },1000);
      </script>
  ```
  #### 3.5.3 Location对象的方法
  | location对象方法 | 返回值                                                           |
  | ---------------- | ---------------------------------------------------------------- |
  | location.assign  | 跟href一样，可以跳转页面,记录浏览历史，所以可以实现后退功能                                         |
  | location.replace | 替换当前页面，因为不记录历史，所以不能后退页面                   |
  | location.reload  | 重新加载页面，相当于刷新按钮或者f5 如果参数为true强制刷新ctrl+f5 |
  |                  |                                                                  |
  
  #### 3.5.4 navigator对象
  navigator对象包含有关浏览器的信息，它有很多属性，最常用的是userAgent，该属性可以返回由客户机发送服务器的user-agent头部的值。
  
  #### 3.5.6 history对象
  window对象给我提供了一个history对象，与浏览器历史记录进行交互。该对象包含用户(在浏览器窗口中)
  访问过的URL
  | history对象方法 | 作用                                                      |
  | --------------- | --------------------------------------------------------- |
  | back()          | 可以后退功能                                              |
  | forward()       | 前进功能                                                  |
  | go(参数)        | 前进后退功能，参数如果是1前进1个页面，如果是-1后退1个页面 |
  |                 |                                                           |
  
  ## 4 PC端网页特效
  ### 4.1 元素偏移量offset系列
  #### 4.1.1 offset概述
  offset属性可以动态的得到该元素的位置，大小等。
  - 获得元素距离带有定位父元素的位置
  - 获得元素自身的大小（宽度高度）
  - 注意：返回的数值都不带单位
  offset系列常用属性：
  | offset系列属性       | 作用                                                           |
  | -------------------- | -------------------------------------------------------------- |
  | element.offsetParent | 返回作为该元素带有定位的父级元素，如果父级都没有定位则返回body |
  | element.offsetTop    | 返回元素相对带有定位父元素上方的偏移                           |
  | element.offsetLeft   | 返回元素相对带有定位父元素左边框的偏移                         |
  | element.offsetWidth  | 返回自身包括padding,边框，内容区的宽度，返回数值不带单位       |
  | element.offsetHeight | 返回自身包括padding,边框，内容区的高度，返回数值都不带单位      |
  
  **注意**
  以带有position属性的父亲为准，如果没有父亲或者父亲没有position属性，则以body为准。
  ```
  <style>
          *{
              margin:0;
              padding: 0;
          }
  
          .father{
              position: relative;
              width: 200px;
              height: 200px;
              background-color: pink;
              margin: 150px;
          }
  
          .son{
              width: 100px;
              height: 100px;
              background-color: purple;
              margin-left: 45px;
          }
          .w{
              width: 200px;
              height: 200px;
              background-color: skyblue;
              margin: 0 auto 200px;
              padding: 20px;
          }
      </style>
      <body>
      <div class="father">
          <div class="son"></div>
      </div>
      <div class="w"></div>
      <script>
         var father= document.querySelector('.father');
         var son= document.querySelector('.son');
         //可以得到元素的偏移位置，返回的不带单位的数值
         console.log(father.offsetLeft);
         console.log(son.offsetLeft); 
         var w = document.querySelector('.w');
         //可以得到元素的大小，宽度和高度，是包含padding+border+width
         console.log(w.offsetWidth);
         console.log(w.offsetHeight);
         //返回带有定位的父亲，否则返回的是body
         console.log(son.offsetParent); //返回带有定位的父亲，否则返回的是body.
         console.log(son.parentNode) //返回父亲，是最近一级的父亲，不管有没有定位。
      </script>
  </body>
  ```
  #### 4.1.2 offset与style的区别
  offset
  - offset可以得到任意样式表中的样式值
  - offset系列获得的数值是没有单位的
  - offsetWidth包含padding+border+width
  - offsetWidth等属性是只读属性，只能获取不能赋值
  - 要想获取元素大小位置，用offset更合适
  
  style
  - style只能得到行内样式表中的样式值
  - style.width获得的是带有单位的字符串
  - style.width获得不包含padding和border的值
  - style.width是可读写属性，可以获取也可以赋值
  - 要想给元素更改值，需要用style改变。
  
  #### 4.1.3 拖动模态框
  ```
      <script>
          var login =document.querySelector(".login");
          var mask =document.querySelector('.login-bg');
          var closeBtn = document.querySelector('#closeBtn');
          var link = document.querySelector('#link');
          var title =document.querySelector('#title');
          link.addEventListener('click',function(){
              mask.style.display='block';
              login.style.display='block';
          })
  
          closeBtn.addEventListener('click',function(){
              mask.style.display='none';
              login.style.display='none';
          })
          //当鼠标按下，就获得鼠标在盒子内的坐标。
          title.addEventListener('mousedown',function(e){
              var x=e.pageX - login.offsetLeft;
              var y=e.pageY - login.offsetTop;
              //鼠标移动的时候，把鼠标在页面中的坐标，减去鼠标在盒子内的坐标就是模态框的left和top值
              document.addEventListener('mousemove',fn)
              function fn(e){
                  login.style.left = e.pageX-x+'px';
                  login.style.top = e.pageY - y+'px';
              }
  
              //鼠标弹起，就让鼠标移动事件停止
              document.addEventListener('mouseup',function(){
                  document.removeEventListener('mousemove',fn);
              }) 
          })
      </script>
  ```
  
'''
linesHighlighted: [
  118
  135
]
isStarred: false
isTrashed: false
