createdAt: "2020-11-16T14:18:42.347Z"
updatedAt: "2022-01-27T02:45:41.842Z"
type: "MARKDOWN_NOTE"
folder: "d93d185dcf894dbad7b3"
title: "铁路调度台项目总结"
tags: []
content: '''
  # 铁路调度台项目总结
  [TOC]
  ## 一、代码结构
  ### 1.1 BaseApp.java
  首先初始化 异常捕获线程，注册Activity生命周期监听，开启logService,开始刷新时间。
  其次初始化 科达视讯SDK，1.设置能力集配置发送或接受视频的码率，以及使用的协议。2.将context传给媒体控制器，3.初始化网络信息，4.开始初始化各项服务。固定SIP传输方式
  
  ### 1.2 SplashActivity
  通过工具类判断，是否已经配置，如果已经配置直接启动MainActivity,否则启动LoginActivity.
  
  ### 1.3 LoginActivity
  通过DataBinding 与View进行绑定，最核心方法 调用 LoginManager.loginAPS 开始登录。
  
  ### 1.4 LoginManage
  loginAps方法开始注册APS，会通过BaseCallBack 收到回调信息，并转发到LoginCallback中。然后判断是否注册成功。
  之后保存sip配置信息，平台配置信息。最后到LoginManager去注册SIP，登录会管平台，并在BaseCallBack收到回调，回传到LoginCallBack中。
  以上当APS注册完成后，跳转到MainActivity.
  
  ### 1.5 MainActivity
  当第一次APS，SIP,平台已经注册成功后，下次启动直接进入MainActivity中注册。
  初始化呼叫记录区 initRecordArea ，通过Room 去加载RecordDao表内容。
  
  初始化呼叫用户去 initContactArea, 通过Room 去加载ContactDao表内容，点击用户可以直接呼叫，长按用户进行删除，点击加号可以启动弹框添加数据，
  当添加完毕后，会去调用refreshContacts 去刷新。
  
  初始化自定义用户区 initContactGpArea.  先去初始化Adapter,然后通过点击添加，视图来添加数据。
  长压来删除数据。
  
  ### 1.6 AudioActivity
  AudioActivity主要负责音频会议。其CallInterimFragment包括了点对点，组呼的界面交互功能。AudioActivity将回调消息传递到CallInterimFragment,然后再由CallInterimFragment对传递的消息进行处理。
  
  ### 1.7 VideoActivity
  VideoActivity主要负责视频会议。其中由三个Fragmeng进行画面展示VideoBottomFunctionFragment负责显示通话底部功能栏。
  VideoInterimFragment负责展示视频画面内容。
  VideoJoinInterimFragment负责展示加入会议的界面内容。
  
  ## 二、功能介绍
  ### 2.1重播功能
  目前支持重拨音频呼叫，视频会议，会议呼叫，组呼呼叫，视频会议呼叫。
  当点击重拨的时候，会拿到list.并遍历最近的呼出(单呼)，并同时开启呼出的AudioActivity.
  通过AudVidManager 发送请求。并在BaseCallback中收到回调，被动叫ConfInComingNtf接口,主动叫ConfCallingNtf接口，然后都回传到AudVidCallback, 
  如果是主动叫说明isCallincoming=false。如果是被动叫说明isCallincoming = true.  并启动AudioActivity，如果点击接受，通过AudVidManager.Accept 调用SDK 开始通话，然后会收到两个回调ConfCallingNtf，P2PStartedNtf
  然后根据三种状态来判断，如果是通话中，将CallInterimFragment的Button打开。
  
  ### 2.2 会议功能
  TestMeetDialog是一个Dialog弹出框，在初始化的时候会去加载ContactDao表内容，首先会初始化ContactEditAdapter 与Recycle进行绑定，然后通过选中用户来参加会议。
  
  ### 2.3 拨号功能
  DialpadDialog是一个Dialog弹出框，会弹出一个键盘，其中T185,G1365,K288,G98 需要进行转换为7位ASCII码
  点击呼出转到mainactivity call方法中(只能单独呼叫)
  
  ### 2.4 添加用户组
  AddGrouDialog是一个Dialog 弹出框，会弹出一个加载ContactDao表内容的窗口，首先会初始化与呼叫用户去一样的ContactEditAdapter，加载到弹窗中。 
  然后通过添加用户，将数据加载到ContactGroupLocal中。
  
  ### 2.5 自动应答
  属于设置项，当开启自动应答功能后，被叫端在2S后会自动接听呼叫。
  
  ### 2.6 挂机释放控制
  属于设置项，支持互不释放控制，主叫释放控制，被叫释放控制三种。
  当设置释放控制后，挂机的权力交由对方控制。
  ![互不释放控制.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\388d4bf9.png)
  ![被叫释放控制.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\a18e32d8.png)
  ![主叫释放控制.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\92286d8e.png)
  
  ### 2.7 呼叫前转
  属于设置项，目前的前转属于无条件前转，当一端设置了需要前转的账号。
  然后被另一端呼叫时，会自动将呼叫转给设定的账号。
  
  ### 2.8 保持
  在音频呼叫功能下，AB两端通话中，A端使用保持功能将B通话保持，然后可以与别的呼叫进行通话。而B端将听到等待音。直到A端恢复通话，或直接挂断。
  ![保持.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\a478cbca.png)
  
  ### 2.9 等待
  在音频呼叫功能下，且呼叫等级相同的情况下，AB两端通话中，C端呼叫AB其中一端。
  这时会振铃并提示有别的呼叫呼入。
  ![等待.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\dc94431b.png)
  
  ### 2.10 转移
  在音频呼叫功能下，当AB两端通话中，A将呼叫转移给C。这时候C会收到B的呼叫。
  ![转移.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\3a2eea99.png)
  
  ### 2.11 强插
  在音频呼叫功能下，且C的呼叫等级比AB都要高。当AB两端通话中，C呼叫A，这时A会把当前B的呼叫保持住然后与C进行通话。当A与C通话结束后。自动恢复A与B之间的通话。
  ![强插.png](:storage\\d953365a-e4ac-4e49-b4df-42e9ceb14faf\\5ec475c6.png)
  
  ## 三、遇到的问题
  ### 3.1 Spinner 下拉框显示问题
  #### 3.1.1 需求
  1. Spinner选中项始终唯一
  2. Spinner选项中改变点击内容
  3. Spinner点击同一内容项
  #### 3.1.2 应对方式
  1. 初始化数据不要采用在String资源中定义arry-string,这会导致后续数据不能更改。
  2. 自定义Spinner需要搭配Adapter,需要配置两个资源文件,第一个是显示项布局，第二个是下拉框布局。第一个布局框内容需要是CheckedTextView的内容，第二个下拉框布局，可以采用系统布局android.R.layout.simple_spinner_dropdown_item，也可以自定义布局。
  3. 在Adapter中需要实现getDropDownView，getView两个方法，
  4. getDropDownView用来实现下拉框中内容,如果采用的系统布局,可以直接用inflate获取到android.R.layout.simple_spinner_item，然后可以绑定到android.R.id.text1。getDropDownView中可以实现自定义下拉框内容。
  5. getView用来实现选中内容的显示，需要自己定义item，然后用LayoutInflater.from(getContext()).inflate()来加载View。 getView中可以实现选中项始终保持唯一。
  
  6. Spinner控件本身不支持,连续点击同一内容触发点击事件。要实现同一内容可以连续点击，需要采用反射的方式。
  ```
  Field field = AdapterView.class.getDeclaredField("mOldSelectedPosition");
  field.setAccessible(true);
  field.setInt(mBinding.settingBtn, AdapterView.INVALID_POSITION);
  ```
  
  ### 3.2 SeekBar自定义使用
  #### 3.2.1 需求
  1. 自定义Seekbar
  
  #### 3.2.2 应对方式
  1. android:progressDrawable 用来设置SeekBar进度条样式。
  2. android:thumb 用来设置拖动点样式。
  
  #### 3.2.3 参考文献
  [Android通过SeekBar控制系统音量_犀利的小牛-CSDN博客](https://blog.csdn.net/a1533588867/article/details/53738027)
  
  ### 3.3 DialogFragment 透明背景设置
  #### 3.3.1 需求
  1. 去掉DialogFragment 内容框外背景。
  2. 去掉DialogFragment 内容框内背景。
  
  #### 3.3.2 应对方式
  android 在DialogFragment中onStart()中设置
  ```
  //设置透明背景
          Window mwindow = Objects.requireNonNull(getDialog()).getWindow();
          Dialog dialog = getDialog();
          if (dialog != null && mwindow != null) {
              dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent); //设置Dialog内背景透明
              WindowManager.LayoutParams params = mwindow.getAttributes();
              params.dimAmount = 0.0f;   //设置Dialog外背景内容
              params.flags |= WindowManager.LayoutParams.FLAGS_CHANGED;
              mwindow.setAttributes(params);
          }
  ```
  #### 3.3.3 参考文献
  [Dialog/DialogFragment 设置透明度/暗度/大小属性_K_Hello的博客-CSDN博客](https://blog.csdn.net/K_Hello/article/details/99548537?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)
  
  ### 3.5 实现开机自启动
  #### 3.5.1 需求
  1. 实现在lunch后启动第三方App
  2. 实现当Android Logo 消失后就启动第三方App
  
  #### 3.5.2 应对方式
  由于Android8以上版本禁止静态广播注册,因此如果8以上版本需要实现自启动，必须需要root权限，将APK导入到System/app，因此只有在此目录下的App才能收到特定系统级广播，如果是Android8以下版本，可以通过静态广播注册的方式实现。
  
  将第三方App设置位桌面应用，有两种方式，
  第一种方法，可以实现系统内多个桌面应用切换，当不想用第三方应用时，可以从设置中切换回原生桌面应用
  在AndroidMainfest.xml中修改
  ```
  <intent-filter>
      <action android:name="android.intent.action.MAIN" />
  
      <category android:name="android.intent.category.LAUNCHER" />
      <category android:name="android.intent.category.HOME" />
      <category android:name="android.intent.category.DEFAULT" />
  </intent-filter>
  ```
  按Home键或回退，将重启弹框，可以通过adb shell 将虚拟键隐藏。
  adb shell am broadcast -a android.intent.action.HIDE_NAVIGATION_BAR
  adb shell am broadcast -a android.intent.action.SHOW_NAVIGATION_BAR
  
  
  第二种方式，直接把第三方应用当作系统桌面应用，但是若该应用出BUG时，桌面就不能启动，因为桌面就是该应用。
'''
linesHighlighted: [
  86
  2
  36
]
isStarred: false
isTrashed: false
