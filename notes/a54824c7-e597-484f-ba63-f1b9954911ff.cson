createdAt: "2019-10-18T07:24:48.402Z"
updatedAt: "2019-10-18T08:08:59.142Z"
type: "MARKDOWN_NOTE"
folder: "537068cf3ce988a4b28a"
title: "数据结构与算法"
tags: []
content: '''
  # 数据结构与算法
  [toc]
  ## 1、设计模式
  
  ### 单例设计模式
  单例主要分为：懒汉式单例、饿汉式单例、登记式单例。
  特点：
  1. 单例类只有一个实例
  2. 单例类必须自己创建自己的唯一实例
  3. 单例类必须给所有其他对象提供这一实例。
  在计算机系统中，像线程池，缓存、日志对象、对话框、打印机等常被设计成单例。
  
  **懒汉式单例：**
  Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。
  
  ![4fe3849d.png](:storage\\a54824c7-e597-484f-ba63-f1b9954911ff\\4fe3849d.png)
  
  它是线程不安全的，并发情况下很有可能出现多个Singleton实例，要实现线程安全，有以下三种方式：
  1.在getInstance方法上加上同步 
  ```
  public static synchronized Singleton getInstance(){
   if(mSingleton ==null){
        mSingleton=new Singleton();
   }
   return mSingleton;
  }
  
  ```
  2.双重检查锁定
  ```
  public static Singleton getInstance(){
      if(mSingleton==null){
        synchronized (Singleton.class){
            if(mSingleton==null){
                mSingleton=new Singleton();
            }
        }
      }
      return mSingleton;
  }
  ```
  3.静态内部类
  ```
  public class Singleton(){
    private static class lazyHolder{
      private static final Singleton INSTANCE =new Singleton();
    }
    private Singleton(){
    }
    public static final Singleton getInstance(){
      return lazyHolder.INSTANCE;
    }
  }
  ```
  这种方式对比前两种，既实现了线程安全，又避免了同步带来的性能影响。
  
  **饿汉式单例**
  饿汉式在创建类的同时就已经创建好了一个静态的对象供系统使用，以后不再改变，所以天生是系统安全。
  ```
  public class Singleton1{
      private Singleton1(){}
      private static final Singleton1 single=new Singleton1();
      //静态工厂方法
      public static Singleton1 getInstance(){
          return single;
      }
  }
  ```
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
