createdAt: "2020-08-23T08:53:29.209Z"
updatedAt: "2020-09-06T10:23:54.383Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "C++ 基础入门"
tags: []
content: '''
  # C++ 基础入门
  [TOC]
  
  ## 1.常量 
  作用：用于记录程序中不可改变的数据
  C++ 定义常量两种方式
  
  1.#define宏常量：#define 常量名 常量值
  - 通常在文件上方定义，表示一个常量, 不可修改
  
  2.const 修饰的变量const数据类型 常量名 = 常量值
  - 通常在变量定义前加关键字const,修饰该变量为常量，不可修改。
  
  案例
  ```
  #define day 7 
  
  int main(){
      cout << "一周有" << day <<"天"<<endl;
      const int mouth=30;
  
      cout <<"一月有" << mouth <<"天"<<endl;
  
      system("pause");
      return 0;
  }
  ```
  
  ## 2.数据类型
  C++规定在创建一个变量或者常量时，必须指定出相应的数据类型，否则无法给变量分配内存。
  
  ### 2.1 整型
  作用：整型变量表示的是整数类型的数据
  | 数据类型  | 占用空间                                        | 取值范围       |
  | --------- | ----------------------------------------------- | -------------- |
  | short     | 2字节                                           | (-32768~32767) |
  | int       | 4字节                                           | (-2^31~2^31-1) |
  | long      | Windows为4字节，Linux为4字节(32位)，8字节(64位)   | (-2^31~2^31-1) |
  | long long | 8字节                                           | (-2^63~2^63-1) |
  
  ### 2.2 sizeof关键字
  作用：利用sizeof关键字可以统计数据类型所占内存大小
  语法：(sizeof(数据类型/变量))
  
  案例:
  ```
  int main(){
      
      cout << "short 类型所占内存空间为：" << sizeof(short) <<endl;
  
      cout << "int 类型所占内存空间为:" << sizeof(int) <<endl;
  
      cout << "long 类型所占内存空间为:" << sizeof(long) << endl;
  
      cout << "long long 类型所占内存空间为" <<sizeof(long long) <<endl;
  
      system("pause");
      return 0;
  }
  ```
  
  ### 2.2 浮点型
  作用：用于表示小数
  浮点型变量分为两种：
  1.单精度float
  2.双精度double
  
  两者的区别在于表示的有效数组范围不同
  | 数据类型 | 占用空间 | 有效数字范围    |
  | -------- | -------- | --------------- |
  | float    | 4字节    | 7位有效数组     |
  | double   | 8字节    | 15~16位有效数字 |
  
  案例：
  ```
  int main(){
      
      float f1= 3.14f;
      double d1 =3.14;
      
  
      cout<< f1 <<endl;
      cout<< d1 <<endl;
      cout<< "float sizeof="<<sizeof(f1)<<endl;
      cout<< "double sizeof="<<sizeof(d1)<<endl;
  
      system("pause");
      return 0;
  }
  ```
  ### 2.3 字符型
  作用：字符型变量用于显示单个字符
  语法：char ch ='a';
  - C和C++中字符型变量只占用1个字符
  - 字符型变量并不是把字符本身放到内存中存储，而是将对用的ASCII编码放入到存储单元。
  案例：
  ```
  char ch ='a';
  cout << ch<<endl;
  cout <<sizeof(char)<<endl;
  ```
  
  ### 2.4 字符串型
  作用：用于表示一串字符
  语法: string 变量名=“字符串值”
  案例：
  ``` 
      需要加入头文件#include<string>
      string var ="zhouwei";
      cout << var <<endl;
  ```
  
  ### 2.5 数据的输入
  作用：用于从键盘获取数据
  语法：cin >>变量
  案例：
  ```
   int a =0;
      cout << "请输入整形变量" << endl;
      cin >> a;
      cout << a <<endl;
  ```
  
  ### 2.6 循环案例-猜数字
  ```
  #include <iostream>
  #include <string>
  #include <stdlib.h>
  using namespace std;
  
  int main(){
      //rand()方法需要导入包stdlib.h
      //rand()%100+1生成 0~100之间的一个随机数
      int num =rand() % 100+1;
      int input=0;
      cin >> input;
      while (input!=num)
      {
          if(input<num){
              cout<< "猜小了"<<endl;
          }
          if(input>num){
              cout<< "猜大了"<<endl;
          }
          cout<<"请重新输入"<<endl;
          cin >> input;
          /* code */
      }
      cout <<"猜对了"<<endl;
      
      system("pause");
      return 0;
  }
  ```
  
  ## 3.数组名的用途
  1. 可以通过数组名统计整个数组占用内存大小
  ```
  int arr[10]={1,2,3,4,5,6};
  cout << "整个数组占用内存空间为："<<sizeof(arr) <<endl;
  cout << "每个元素占用内存空间为: "<<sizeof(arr[0])<<endl;
  cout << "数组中元素个数为:"<< sizeof(arr)/sizeof(arr[0]) << endl;
  ```
  2. 可以通过数组名查看数组首地址
  ```
  cout << "数组首地址为："<<arr << endl;
  cout << "数组中第一个元素地址为：" << &arr[0]<<endl;
  cout << "数组中第二个元素地址为：" << &arr[1]<<endl;
  ```
  ## 4.二维数组
  1. 二维数组的定义方式
  - 数据类型 数组名【行数】【列数】;
  - 数据类型 数组名【行数】【列数】={{数据1，数据2},{数据3，数据4}};
  - 数据类型 数组名【行数】【列数】={数据1，数据2，数据3，数据4};
  - 数据乐行 数组名【】【列数】={数据1，数据2，数据3，数据4};
  2. 二维数组名
  ```
  int main(){
      int arr[2][3]={
          {1,2,3},
          {4,5,6}
      };
      cout << "二维数组占用内存空间为："<< sizeof(arr) <<endl;
      cout << "二维数组第一行占用内存为："<< sizeof(arr[0])<<endl;
      cout << "二维数组第一个元素占内存为:" << sizeof(arr[0][0]) <<endl;
      cout << "二维数组行数为: " << sizeof(arr)/sizeof(arr[0])<<endl;
      cout << "二维数组列数为: " << sizeof(arr[0])/sizeof(arr[0][0]) << endl;
      
      system("pause");
      return 0;
  }
  ```
  
  ## 5.指针的定义和使用
  1. 定义指针
  int a= 10;
  指针定义的语法：数据类型 * 指针变量名
  int * p;
  让指针记录变量a的地址
  p=&a
  
  2. 使用指针
  可以通过解引用的方式来找到指针指向的内存
  指针前面 * 代表解引用，找到指针指向的内存中的数据
  ** p =1000;
  
  ### 5.1空指针和野指针
  1. 空指针
  - 指针变量指向内存中编号为0的空间
  - 空指针指向的内存是不可以访问的
  ```
  int main(){
      int *p = NULL
      //空指针不能引用
      cout << *p <<endl;
      system("pause");
      return 0;
  }
  ```
  
  2. 野指针
  - 指针变量指向非法的内存空间
  ```
  int main(){
      //指向变量p指向内存地址编号为0x1100的空间
      int *p = (int *)0x1100;
      cout << *p <<endl;
      system("pause");
      return 0;
  }
  ```
  
  ### 5.2 const修饰指针
  const修饰指针有三种情况
  1. const修饰指针 ——常量指针
  - 指针的指向可以修改，但是指针指向的值不可以修改。
  ```
  const int * p=&a
   * p=20 指针指向的值不可以修改，
   * p=&b 指针指向可以改。
  ```
  2. const修饰常量 —— 指针常量
  - 指针的指向不可以改，指针指向的值可以改。 
  ```
  int * const p =&a;
  * p=20 指向的值可以改，
  * p=&b 指针指向不可以改。
  ```
  3. const即修饰指针，又修饰常量
  ```
  const int * const p =&a
  ```
  
  ### 5.3 指针和数组
  ```
  int main(){
      int arr[]={1,2,3,4,5,6,7,8,9,10};
      int *p=arr;
      cout<<"第一个元素"<<cout;
      cout<<"指针访问第一个元素"<<*p<<endl;
      for(int i=0;i<10;i++){
          cout<<*p<<endl;
          p++;
      }
  
      system("pause");
      return 0;
  }
  ```
  
  ### 5.4 指针和函数
  ```
  int swap(int *p1,int *p2){
      int temp = *p1;
      *p1=*p2;
      *p2=temp;
  }
  
  int main(){
      int a=10;
      int b=20;
      swap(&a,&b);
  
      cout<< "a="<<a<<endl;
      cout<< "b="<<b<<endl;
  
      system("pause");
      return 0;
  }
  ```
  
  ## 6.结构体
  
  ### 6.1 结构体基本概念
  结构体属于用户自定义的数据类型，允许用户存储不同的数据类型
  
  ### 6.2 结构体定义和使用
  语法：struct 结构体名{结构体成员列表};
  通过结构体创建变量的方式有三种:
  - struct 结构体名 变量名
  - struct 结构体名 变量名 ={成员1值，成员2值...}
  - 定义结构体时顺便创建变量
  
  ```
  struct student {
      string name;
      int age;
      int score;
  }stu3;
  
  int main(){
  
      //结构体变量创建方式1
      struct  student stu1; //struct 关键字可以省略
  
      stu1.name="张三";
      stu1.age=10;
      stu1.score = 100;
  
      cout << "姓名："<<stu1.name <<"年龄:"<<stu1.age<< "分数："<<stu1.score<<endl;
  
  
      //结构体变量创建方式2
      struct student stu2 ={"李四",19,60};
      cout << "姓名："<<stu2.name <<"年龄:"<<stu2.age<<"分数："<<stu2.score<<endl;
      
      //结构体变量创建方式3
      stu3.name="王五";
      stu3.age=18;
      stu3.score=80;
  
      cout << "姓名："<<stu3.name <<"年龄:"<<stu3.age<<"分数："<<stu3.score<<endl;    
  
  
      system("pause");
      return 0;
  }
  ```
  ### 6.3 结构体指针
  ```
  struct student {
      string name;
      int age;
      int score;
  };
  
  int main(){
      
      struct student stu ={"张三",18,100};
  
      struct student *p =&stu;
  
      p->score =80; //指针通过 ->操作符可以访问成员
  
      cout <<" 姓名: "<<p->name <<" 年龄: "<<p->age<<" 分数: "<<p->score<<endl;    
  
      system("pause");
       
      return 0;
  }
  ```
  ### 6.4 结构器嵌套结构体
  ```
  struct student {
      string name;
      int age;
      int score;
  };
  
  struct teacher{
      int id;
      string name;
      int age;
      struct student stu;
  };
  
  
  int main(){
      struct teacher t1;
      t1.id=1000;
      t1.name="老王";
      t1.age=26;
      t1.stu.age=18;
      t1.stu.name="张三";
      t1.stu.score=100;
  
      cout<<"教师 职工编号:"<< t1.id<<"姓名："<<t1.name<<"年龄:"<<t1.age<<endl;
      cout<<"辅导学员 姓名：" <<t1.stu.name<<"年龄:"<< t1.stu.name <<"分数:"<<t1.stu.score<<endl; 
  
      system("pause");
       
      return 0;
  }
  ```
  ### 6.5 结构体做函数参数
  ```
  struct student {
      string name;
      int age;
      int score;
  };
  
  struct student1 {
      string name;
      int age;
      int score;
  };
  
  void printWrite(student stu){
      stu.age=200;
      cout << "姓名："<<stu.name<<"年龄:"<<stu.age<<"分数:"<<stu.score<<endl;
  }
  
  
  void printWrite1(student1 *stu){
      stu->age=200;
      cout << "姓名："<<stu->name<<"年龄:"<<stu->age<<"分数:"<<stu->score<<endl;
  }
  
  int main(){
      student stu;
      stu.age=18;
      stu.name="张三";
      stu.score=100;   
  
      student1 stu1;
      stu1.age=18;
      stu1.name="李四";
      stu1.score=150;
  
      printWrite(stu);
      
      cout << "姓名："<<stu.name<<"年龄:"<<stu.age<<"分数:"<<stu.score<<endl;
  
      printWrite1(&stu1);
      cout << "姓名："<<stu1.name<<"年龄:"<<stu1.age<<"分数:"<<stu1.score<<endl;
      system("pause");
       
      return 0;
  }
  ```
  
  ### 6.6 结构体案例
  设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放5名英雄。
  通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。
  ```
  #include <iostream>
  #include <string>
  #include <stdlib.h>
  
  using namespace std;
  
  struct Hero {
      string name;
      int age;
      string sex;
  };
  
  void sortArray(struct Hero array[],int length){
      for(int i=0;i<length-1;i++){
          for(int j=0;j<length-i-1;j++){
              if(array[j].age>array[j+1].age){
                  struct Hero temp = array[j];
                  array[j]= array[j+1];
                  array[j+1]= temp;
              }
          }
      }
  }
  int main(){
  
      Hero heroArray[5]={
          {"刘备",23,"男"},
          {"关羽",22,"男"},
          {"张飞",20,"男"},
          {"赵云",21,"男"},
          {"貂蝉",19,"女"},
      };
      int arraysize=sizeof(heroArray)/sizeof(heroArray[0]);
      sortArray(heroArray,arraysize);
  
      for(int i=0;i<arraysize;i++){
          cout<<"姓名="<<heroArray[i].name<<",年龄="<<heroArray[i].age<<",性别="<<heroArray[i].sex<<endl;
      }
      
      cout<<"结构体大小="<<arraysize<<endl;
      system("pause");
       
      return 0;
  }
  ```
  
  ## 7.通讯录案例
  ```
  #include <iostream>
  #include <string>
  #include <stdlib.h>
  
  using namespace std;
  
  //联系人结构体
  struct Person{
      string name;
      int sex;
      int age;
      string num;
      string address;
  };
  
  //通讯录结构体
  struct AddressBooks{
      //通讯录中保存的联系人数组
      struct Person personArray[2000];
  
      //通讯录当前记录联系人数
      int size;
  };
  
  
  void showMenu(){
      cout << "************************"<<endl;
      cout << "******1、添加联系人******"<<endl;
      cout << "******2、显示联系人******"<<endl;
      cout << "******3、删除联系人******"<<endl;
      cout << "******4、查找联系人******"<<endl;
      cout << "******5、修改联系人******"<<endl;
      cout << "******6、清空联系人******"<<endl;
      cout << "******0、退出通讯录******"<<endl;
      cout << "************************"<<endl;
  }
  
  //添加联系人
  void addPerson(AddressBooks *mAddressBooks){
      if(mAddressBooks->size==2000){
          cout<<"通讯录已满"<<endl;
          return;
      }else{
          //添加具体联系人
          //姓名
          string name;
          cout<<"请输入姓名:"<<endl;
          cin>>name;
          mAddressBooks->personArray[ ].name=name;
          //性别
          cout<< "请输入性别："<<endl;
          cout<< "1---男" << endl;
          cout<< "2---女" <<endl;
          int sex =0;
          while(true){
              cin >> sex;
              if(sex ==1||sex==2){
                 mAddressBooks->personArray[mAddressBooks->size].sex=sex;
                 break;
              }else
              {
                  cout<<"请重新输入"<<endl;
              }
          }
          //年龄
          cout <<"请输入年龄："<<endl;
          int  age =0;
          cin >> age;
          mAddressBooks->personArray[mAddressBooks->size].age=age;
  
          //联系电话
          cout<< "请输入联系电话："<<endl;
          string phone;
          cin >>phone;
          mAddressBooks->personArray[mAddressBooks->size].num=phone;
  
          //住址
          cout<<"请输入家庭住址："<<endl;
          string address;
          cin>>address;
          mAddressBooks->personArray[mAddressBooks->size].address=address;
  
          mAddressBooks->size++;
  
          cout<<"添加成功"<<endl;
          system("pause");
          //清屏操作
          system("cls");
      }
  }
  
  
  //显示联系人
  void showPersion(AddressBooks *mAddressBooks){
      if(mAddressBooks->size==0){
          cout <<"当前记录为空"<<endl;
      }else
      {
          for(int i=0;i<mAddressBooks->size;i++){
               cout<<"姓名:"<<mAddressBooks->personArray[i].name<<"\\t";
               cout<<"性别:"<<(mAddressBooks->personArray[i].sex ==1?"男":"女")<<"\\t";
               cout<<"年龄:"<<mAddressBooks->personArray[i].age<<"\\t";
               cout<<"电话:"<<mAddressBooks->personArray[i].num<<"\\t";
               cout<<"住址:"<<mAddressBooks->personArray[i].address<<endl;
           }
      }
      system("pause");
      system("cls");
  }
  
  //检测联系人是否存在，如果存在，返回联系人所在数组中的位置
  int isExist(AddressBooks *mAddressBooks, string name){
      for(int i=0;i<mAddressBooks->size;i++){
          if(mAddressBooks->personArray[i].name==name){
              return i;
          }
      }
      return -1;
  }
  
  //删除指定联系人
  void deletePerson(AddressBooks *mAddressBooks){
      cout<<"请输入您要删除的联系人"<<endl;
  
      string name;
      cin>>name;
      int result =isExist(mAddressBooks,name);
      if(result !=-1){
          for(int i=0;i<mAddressBooks->size;i++){
              //数据前移
              mAddressBooks->personArray[i] =mAddressBooks->personArray[i+1];
          }
          mAddressBooks->size--; //更新通讯录中的人员数
          cout<<"删除成功"<<endl;
      }else
      {
          cout<<"查无此人"<<endl;
      }
  
      system("pause");
      system("cls");
  }
  
  //查找指定联系人
  void findPersion(AddressBooks *mAddressBooks){
      cout<<"请输入您要查找的联系人"<<endl;
      string name;
      cin>>name;
      int result =isExist(mAddressBooks,name);
      if(result!=-1){
          cout<<"姓名:"<<mAddressBooks->personArray[result].name<<"\\t";
          cout<<"性别:"<<(mAddressBooks->personArray[result].sex ==1?"男":"女")<<"\\t";
          cout<<"年龄:"<<mAddressBooks->personArray[result].age<<"\\t";
          cout<<"电话:"<<mAddressBooks->personArray[result].num<<"\\t";
          cout<<"住址:"<<mAddressBooks->personArray[result].address<<endl;
      }
      else
      {
          cout<<"查无此人"<<endl;
      }
      system("pause");
      system("cls");
      
  }
  
  //更新指定联系人
  void updatePerson(AddressBooks *mAddressBooks){
      cout<<"请输入要更新的联系人"<<endl;
      string name;
      cin>>name;
      int result =isExist(mAddressBooks,name);
      if(result !=-1){
          string name;
          cout<<"请输入姓名"<<endl;
          cin >> name;
          mAddressBooks->personArray[result].name=name;
          //性别
          cout<< "请输入性别："<<endl;
          cout<< "1---男" << endl;
          cout<< "2---女" <<endl;
          int sex =0;
          while(true){
              cin >> sex;
              if(sex ==1||sex==2){
                 mAddressBooks->personArray[result].sex=sex;
                 break;
              }else
              {
                  cout<<"请重新输入"<<endl;
              }
          }
          //年龄
          cout <<"请输入年龄："<<endl;
          int  age =0;
          cin >> age;
          mAddressBooks->personArray[result].age=age;
  
          //联系电话
          cout<< "请输入联系电话："<<endl;
          string phone;
          cin >>phone;
          mAddressBooks->personArray[result].num=phone;
  
          //住址
          cout<<"请输入家庭住址："<<endl;
          string address;
          cin>>address;
          mAddressBooks->personArray[result].address=address;
  
          cout<<"更新成功"<<endl;
      }
      else{
          cout<<"查无此人"<<endl;
      }
      system("pause");
      system("cls");
  }
  
  //清空联系人
  void clearPerson(AddressBooks *mAddressBooks){
      mAddressBooks->size=0;
      cout<<"通讯录已清空"<<endl;
      system("pause");
      system("cls");
  }
  
  int main(){
      AddressBooks maddressbooks;
      maddressbooks.size=0;
  
      int select;
      while(true){
          showMenu();   
          cin>>select;
          switch (select)
          {
          case 0:
              cout<<"系统退出"<<endl;
              system("pause");
              return 0;
              break;
          case 1: 
              //添加联系人
              addPerson(&maddressbooks);
              break;
          case 2:
              //显示联系人
              showPersion(&maddressbooks);
              break;
          case 3:
              //删除联系人
              deletePerson(&maddressbooks);
              break;
          case 4:
              //查找联系人
              findPersion(&maddressbooks);
              break;
          case 5:
              //更新联系人
              updatePerson(&maddressbooks);
              break;
          case 6:
              //清空联系人
              clearPerson(&maddressbooks);
              break;
  
          default:
              break;
          }
      }
  }
  ```
'''
linesHighlighted: [
  55
]
isStarred: false
isTrashed: false
