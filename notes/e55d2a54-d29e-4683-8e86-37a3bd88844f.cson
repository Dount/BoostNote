createdAt: "2023-04-02T15:28:31.959Z"
updatedAt: "2023-04-17T15:43:37.905Z"
type: "MARKDOWN_NOTE"
folder: "537068cf3ce988a4b28a"
title: "清单"
tags: []
content: '''
  # 清单
  
  ## 自我介绍
  
  ## JAVA 
  - Byte和位Bit的关系
  - String,StringBuffer,StringBuilder的区别
  - final,finally和finalize区别 
  - ==和equals有什么区别?equals和hashCode有什么联系
  - Array和ArrayList的区别
  - 什么是面向对象
  - 什么是面向过
  - 简述面向对象的特性
  - 列举Object类的方法
  - 接口和抽象类有什么区别
  - 内部类与外部类的关系
  - 静态内部类与非静态内部类区别
  - 匿名内部类
  - 异常有哪些分类？出现的原因是什么？
  - 有哪些异常处理方式?
  - 简述一下集合主要有哪些类和接口，各自有什么特点
  - Collection和Collections有什么区别 
  - List和Set比较
  - List,Set,Map有什么区别？
  - HashMap的特点
  - HashMap的实现方式
  - HashMap的哈希冲突
  - HashMap的哈希冲突解决
  - 负载因子为什么是0.75
  - HashMap为什么不安全？
  - ConcurrentHashMap的特点
  - 迭代器是什么?
  - 有哪些线程安全的集合类？
  - 创建线程有哪几种实现方式？分别有什么优缺点？
  - 线程有哪些状态
  - 什么是线程安全问题，如何解决
  - 使用volatile的背景
  - volatile的特性
  - 说一说synchronized关键字的作用
  - Lock接口有哪些方法
  - 线程池是什么
  - 为什么需要线程池
  - 创建线程池的方法有哪些
  - CAS的概念
  - 为什么使用CAS
  - CAS有什么问题
  - 什么是ABA
  - 如何解决ABA问题
  - 讲一讲wait、sleep、yield、join方法的区别
  - wait，sleep的区别
  - 进程和线程有什么区别
  - Java 内存区域
  - Java内存模型
  - JMM存在的必要性
  - JMM的三个特征
  - JVM中类加载的过程
  - 加载，链接，初始化
  - 初始化顺序
  - 类加载器的分类
  - 类加载器的代理模式-双亲委托机制
  - java对象引用
  - 浅复制和深复制的区别
  - 反射与注解
  
  ## Android 
  - Application中五个公开的方法
  - Android中什么是Context
  - Service
  - Service - 扩展Binder类
  - 关于启动服务与绑定服务间的转换问题
  - 服务Service与线程Thread的区别
  - Activity与Fragment生命周期
  - Activity生命周期
  - 锁定屏与解锁屏幕时Activity生命周期
  - 两个Activity之间切换
  - 保存与恢复 onSaveInstanceState() onRestoreInstanceState()
  - Activity 启动模式
  - Task任务栈
  - Android横竖瓶切换Activity生命周期 
  - Android - 系统启动过程
  - Android中实现IPC通信的8种方式
  - 序列化与反序列化的知识
  - AIDL 知识
  - AIDL概述
  - 使用AIDL的步骤 
  - AIDL的工作原理
  - 客户端与服务端使用AIDL进行 IPC 的工作流程
  - AIDL与HIDL 区别
  - Binder概述
  - 进程隔离的概念
  - Binder驱动概念
  - 一次Binder IPC通信过程
  - 冷启动与热启动
  - Handler,MessageQueue与Looper关系
  - Handler工作流程
  - OOM内存泄漏 案列分析
  - 内存泄漏和内存溢出的区别
  - 发生ANR的具体表现
  - 导致ANR的场景
  - ANR日志分析
  - ANR其它分析方式
  - ANR的处理
  
  
  ## 项目中遇到的问题：
  1. 沟通问题
  遇到不清楚的需求，及时主动了解其内容表述。以免耽误进度。
  遇到向别人解释其功能含义时，尽量以时序图或流程图说明和表述。
  遇到BUG或不可抗力问题时，及时反馈。并记录流转过程。
  2. 优先级问题
  在遇到工作安排时，一定要问清优先顺序，以免耽误，
  若同时开展多个工作时，一定要向领导请示，优先程度。
  若同时解决多个BUG时，优先解决问题严重BUG。
  3. 技术问题
  遇到技术瓶颈，及时向同事或领导，寻求帮助。以免耽误进度。
  在技术问题处理之后，用时序图或流程图记录处理方案。
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
