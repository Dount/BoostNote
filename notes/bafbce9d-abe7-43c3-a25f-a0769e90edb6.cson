createdAt: "2020-07-01T14:12:02.883Z"
updatedAt: "2020-07-11T14:24:04.981Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "JAVAScript 基础教程"
tags: []
content: '''
  # JAVAScript 基础教程
  [TOC]
  ## 1.初识JavaScript
  ### 1.5 JS的组成
  1.ECMAScript (JavaScript语法)
  ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。
  
  3.DOM(页面文档对象模型)
  文档对象模型（Document Object Model）,是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过DOM提供的接口可以对页面上的各种元素进行操作（大小，位置，颜色）
  
  5.BOM(浏览器对象模型)
  浏览器对象模型(Browser Object Moder),它提供了独立于内容的，可以与浏览器窗口进行互动的对象接口。通过BOM可以操作浏览器窗口，比如弹出框，控制浏览器条状，获取分辨率等。
  
  ### 1.6 JS初体验
  1.行内式JS
  ```
  <input type="button" value="点我试试" onclick="alert('Hello wordl')"/>
  ```
  可以将单行或少量JS代码写在HTML标签的事件属性中（以on开头的属性）
  注意单双引号的使用：在HTML中我们推荐使用双引号，JS中我们推荐使用单引号
  可读性差，在html中编写JS大量代码时，不方便阅读。
  特殊情况下使用
  
  2.内嵌JS
  ```
  <script>
  alert('Hello World~!');
  </script>
  ```
  可以将多行JS代码写到<script>标签中
  内嵌JS是学习时常用的方式
  
  3.外部JS文件
  ```
  <script src="my.js"></script>
  ```
  利用HTML页面代码结构化，把大段JS代码独立到HTML页面之外
  引用外部JS文件的script标签中间不可以写代码
  适合于JS代码量比较大的情况
  
  ### 1.7 JS注释
  1. //单行注释 ctrl+/
  2. /*  */ shift+alt+a
  
  ### 1.8 JavaScript 输入输出语句
  
  | 方法 | 说明 | 归属 |
  | ---- | ----| ---- |
  | alert |浏览器弹出警示框|浏览器|
  |console.log(msg)|浏览器控制台打印输出信息|浏览器|
  |prompt(info)|浏览器弹出输入框，用户可以输入|浏览器|
  
  ## 2.变量概述
  ### 2.1 变量的使用
  1.声明变量
  ```
  var age; 声明一个名称为age的变量
  ```
  var 是一个JS关键字，用来声明变量（variable变量的意思）。使用该关键字声明变量后，计算机会自动为变量分配内存空间。
  2.变量的初始化
  ```
  var age=18; 声明变量同时赋值为18
  ```
  声明一个变量并赋值，称之为变量的初始化
  
  ### 2.1 变量的命名规范
  - 由字符（A-Z,a-z）,数字(0-9),下划线_,美元符号组成
  - 严格区分大小写。var app;和var App;是两个变量
  - 不能以数字开头。18age是错误的
  - 不能是关键字，保留字。
  - 变量名必须有意义。MMD BBD
  - 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。
  
  ### 2.2 变量小结
  - 为什么需要变量
  因为我们一些数据需要保存，所以需要变量
  
  - 变量是什么
  变量就是一个容器，用来存放数据的。方便我们以后使用里面的数据
  
  - 变量的本质是什么
  变量是内存里的一块空间，用来存储数据
  
  - 变量怎么使用的
  我们使用变量的时候，一定要声明变量，然后赋值
  声明变量本质是去内存申请空间
  
  - 什么是变量的初始化
  声明变量并赋值我们称之为变量的初始化
  
  ## 3.数据类型
  ### 3.1 变量的数据类型
  JavaScript是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过工程中，类型会被自动确定。
  ```
  var age=10 ;//这是一个数字型
  var areYouOk= '是的' //这是一个字符串
  ```
  在代码运行时，变量的数据类型是由JS引擎根据=右边变量值的数据类型来判断的，运行完毕后，变量就确定了数据类型。
  JavaScript拥有动态类型，同时也意味着相同的变量可用作不同的类型。
  ```
  var x=6; //x 为数字
  var x="Bill" //x为字符串
  ```
  ### 3.2 数据类型的分类
  JS 把数据类型分为两类:
  - 简单数据类型（Number,String,Boolean,Undefined,Null）
  - 复杂数据类型（Object)
  
  ### 3.3 简单数据类型
  JavaScript中的简单数据类型及其说明如下：
  | 简单数据类型 | 说明 | 默认值 |
  | ---- | ----| ---- |
  | Number |数字型，包含整型值和浮点型值，如21,0.21| 0 |
  |Boolean |布尔值类型，如 true ,false 等价于1和0|false|
  |String |字符串类型，如"张三"|""|
  |Undefined |var a 声明了变量a但是没有给值|undefined|
  |Null |var a= null 声明了变量a 为空值|null|
  
  ### 3.4 数字型范围
  javaScript中数值的最大和最小值
  alert(Number.MAX_VALUE);//1.7976931348623157e+308
  alert(Number.MIN_VALUE);//5e-324
  
  ### 3.5数字型三个特殊值
  - infinity ,代表无穷大，大于任何数值
  - -infinity,代表无穷小，小于任何数值
  - NaN,Not a number, 代表一个非数值
  "字符串"-100=NaN(非数值)
  
  ### 3.6 数字型Number
  isNaN() 这个方法用来判断非数字，并且返回一个值 如果是数字返回的是false如果不是数字返回的是true
  
  ### 3.7 字符串型String
  字符串型可以是引号中的任意文本，其语法为双引号""和单引号"
  ```
  var strMsg="我爱北京天安门"; //使用双引号表示字符串
  var strMsg2="我爱吃猪蹄~" //使用单引号表示字符串
  
  ```
  #### 3.7 字符串转义符
  转义符都是\\开头的，常用的转移符及其说明如下:
  
  | 转义符 | 解释说明 |
  | ---- | ----|
  | \\n |换行符,n是newline的意思|
  | \\\\ | 斜杠\\ |
  | \\' | '单引号|
  | \\" | "双引号|
  | \\t | tab缩进 |
  | \\b | 空格，b是blank的意思 |
  
  #### 3.8 字符串型STRING
  1. 字符串长度
  字符串是由若干字符组成，这些字符的数量就是字符串的长度。通过字符串的length属性可以获取整个字符
  ```
  var strmsg="我是最帅多金的程序员"
  alert(strMsg.length);
  ```
  2. 字符串拼接
  - 多个字符串之间可以使用+进行拼接，其拼接方式为：字符串+任何类型=拼接之后的新字符串
  - 拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串。
  
  3.字符串拼接加强
  - 我们进场会将字符串和变量来拼接，因为变量可以很方便地修改里面的值。
  - 变量是不能添加引号的，因为加引号的变量会变成字符串
  - 如果变量两侧都有字符串拼接，口诀“引引加加”，删掉数字，变量写加中间。
  
  #### 3.8.1 Undefined 和Null
  一个声明后没有赋值的变量会有一个默认值undefined(如果进行相连或者相加，结果是不一样的)
  ```
  var variable;
  console.log(variable);//undefined
  console.log('你好'+variable); //你好undefined
  console.log(11+variable); //NaN
  console.log(true+variable); //NaN
  ```
  一个声明变量给null值，里面存的值为空
  ```
  var vari=null;
  console.log('你好'+vari); //你好null
  console.log(11+vari); //11
  console.log(true+vari); //1
  ```
  
  #### 3.8.2 取检测变量的数据类型
  typeof 可用来获取检测变量的数据类型
  
  ### 3.9 数据类型转换
  #### 3.9.1 什么是数据类型转换
  使用表单，prompt获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另外一种数据类型。
  - 转换为字符串类型
  - 转换为数字型
  - 转换为布尔型
  
  #### 3.9.2 转换为字符串
  | 方式 | 说明 |案例|
  | ---- | ----|----|
  | tostring() | 转换字符串 | var num=1,alert(num.toString) |
  | String()强制转换 | 转换字符串 | var num=1,alert(String(num)) |
  | 加号拼接字符串 | 和字符串拼接的结果都是字符串 | var num=1;alert(num+"我是字符串") |
  
  - toString()和String()使用方式不一样
  - 三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一种方式也称之为隐式转换
  
  #### 3.9.3 转换为数字型（重点）
  | 方式 | 说明 |案例|
  | ---- | ----|----|
  | parseint(String)函数| 将string类型转成整数数值型 | parseInt('78')|
  | parseFloat(String)函数 | 将string类型转成浮点数数值型 | parseFloat('78.21')|
  | Number()强制转换函数 | 将string类型转换为数值型 | Number('12') |
  | js隐式转换(- * /) | 利用算术运算隐式转换为数值型 | '12'-0 |
  
  - 注意parseInt 和parseFloat单词的大小写
  - 隐式转换是我们在进行算术运算的时候，JS自动转换了数据类型。
  
  
  ## 4.解释型语言和编译型语言
  ### 概述
  计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序，程序语言返程机器语言的，被称为翻译器
  - 翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同。
  - 编译器是在代码执行之前进行编译，生成中间代码文件
  - 解释器是在运行时进行及时解释，并立即执行（当编译器以解释方式运行的时候，也称之为解释器）
  ### 执行过程
  ![f51d2e76.png](:storage\\bafbce9d-abe7-43c3-a25f-a0769e90edb6\\f51d2e76.png)
  
  ## 5.运算符
  ### 5.1 ===与！== (全等)
  全等要求值和数据类型都一致
  ```
  console.log(18==='18') //false
  ```
  ### 5.2 ==(判断)
  在JavaScript == 有默认转换数据类型的功能，比如会把字符串的数据转换为数字型
  ```
  console.log(18=='18') //true
  ```
  ## 6 断点调试
  断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停止，然后你可以一步一步往下调试，调试的过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。
  - 浏览器中按F12->sources-->找到需要调试的文件-->在程序的某一行设置断点。
  - 通过watch可以监视变量值的变化。
  - 按F11让程序单步执行，这个时候，观察watch中变量值的变化。
  
  ## 7 数组
  ### 7.1 数组的创建方式
  JS中创建数组有两种方式
  - 利用new创建数组
  - 利用数组字面量创建数组
  
  ### 7.2利用new创建数组
  ```
  var 数组名=new Array();
  var arr=new Array(); 创建一个空数组
  ```
  
  ### 7.3利用数组字面量创建数组
  ```
  1.使用数组字面量方式创建的数组
  var 数组名=[];
  2. 使用数组字面量方式创建带初始值的数组
  var 数组名=['小白','小黑','大黄','瑞奇'];
  ```
  - 数组的字面量是方括号[]
  - 声明数组并赋值称为数组的初始化
  - 这种字面量方式也是我们以后最多使用的方式 
  
  ### 7.4 数组元素的类型(重要)
  数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。
  ```
  var arrStus=['小白',12,true,28.9];
  ```
  ### 7.5 数组的长度
  使用 数组名.length 可以访问数组元素的数量(数组长度)
  
  ### 7.6 通过修改length长度新增数组元素 (重要)
  - 可以通过修改length长度来实现数组扩容的目的
  - length属性是可读写的
  ```
  var arr=['red','green','blue','pink'];
  arr.length=7;
  console.log(arr);
  console.log(arr[4]);
  console.log(arr[5]);
  console.log(arr[6]);
  ```
  其中索引是4,5,6的控件没有给值，就是声明变量未给值，默认值就是undefined.
  
  ### 7.7 通过修改数组索引新增数组元素 (重要)
  - 可以通过修改数组索引的方式追加数组元素
  - 不能直接给数组名赋值，否则会覆盖掉以前的数据
  ```
  var arr1=['red','green','blue'];
  arr1[3]='yellow'//追加新元素
  arr1[5]='black' //如果給arr1[5]赋值，那么arr1[4]就是undefined
  arr1[0]='pink'; //这里是替换原来的数组元素
  arr1='有点意思' //不要直接给数组名赋值，否则里面的数组元素都没有了。
  ```
  
  ### 7.8 arr[arr.length] 技巧
  ```
  var arr=[2,0,6,1,77,0,52,0,25,7]
  var newArr=[];
  //刚开始 newArr.length就是0
  for (var i = 0 ; i< arr.length; i++ ){
     if(arr[i]>=10){
      //新数组索引号应该从0开始，依次递增
      newArr[newArr.length]=arr[i];
     }
  }
  console.log(newArr);
  }
  
  ```
  
  ## 8 函数
  ### 8.1 声明函数
  函数在使用时分为两步：声明函数和调用函数
  1.声明函数
  function 函数名（）{}
  - function声明函数的关键字，全部小写
  - 函数是做某件事情，函数名一般是动词
  - 函数不调用自己不执行
  2.函数调用
  函数名();
  
  ### 8.2 函数的封装
  - 函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。
  - 简单理解：封装类于将电脑配件整合组装到机箱中
  
  
  ### 8.3 函数形参和实参个数不匹配的问题(重要)
  ```
  function getSum(num1,num2){
    console.log(num1+num2);
  }
  
  getSum(1,2);// 结果是3
  getSum(1,2,3); //结果是3
  getSum(1); //结果是NaN
  
  ```
  - 如果实参的个数和形参的个数一致，则正常输出结果。
  - 如果实参的个数多于形参的个数，会取到形参的个数。
  - 如果实参的个数小于形参的个数，多于的形参定义为undefined 最终的结果就是NaN
  
  **注意**
  在JavaScript中，形参的默认值是undefined.
  
  ### 8.4 arguments的使用（重要）
  当我们不确定有多少个参数传递的时候，可以用arguments来获取，在javaScript中，arguments实际上它是当前函数的一个内置对象，所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有实参。
  
  arguments展示形势是一个伪数组，因此可以进行遍历。伪数组具有以下特点：--
  - 具有length属性
  - 按索引方式存储数据
  - 不具有数据的push,pop等真正的方法
  
  
  ### 8.5 函数的两种声明方式
  1.利用函数关键字自定义函数（命名函数）
  ```
  function fn(){}
  fun();
  ```
  2.函数表达式(匿名函数)
  ```
  var fun=function(){};
  fun();
  ```
  - fun是变量名，不是函数名
  - 函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数。
  - 函数表达式也可以进行传递参数
  
  ## 9 作用域
  ### 9.1 javaScript作用域概述
  就是代码名字（变量）在某个范围内起作用和效果，目的是为了提高程序的可靠性更重要的是减少命名冲突。
  
  ### 9.2 全局作用域
  真个script标签，或者是一个单独的js文件
  
  ### 9.3 局部作用域
  在函数内部就是局部作用域 这个代码的名字只在函数内部起效果和作用域。
  
  ### 9.4 变量作用域
  根据作用域的不同分为全局变量和局部变量
  
  ### 9.5 全局变量（重要）
  在全局作用域下的变量
  **注意** 
  如果在函数内部 没有生命直接赋值的变量也属于全局变量。
  
  ### 9.6 局部变量
  在局部作用域下的变量，后者在函数内部的变量就是局部变量。
  
  ### 9.7 全局变量与局部变量 执行效率
  全局变量：
  在任何一个地方都可以使用，只有在浏览器关闭才会被销毁，因此比较占内存。
  
  局部变量：
  只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。
  
  ## 10 预解析（重要）
  1. JS引擎运行JS 分为两步：预解析，代码执行
  - 预解析JS引擎会把js里面所有的var 还有function提升到当前作用域的最前面
  - 代码执行 按照代码书写的顺序从上往下执行。
  2.  预解析分为：变量预解析（变量提升）和函数预解析（函数提升）
  - 变量提升就是把所有的变量声明提升到当前的作用最前面 不提升赋值操作
  ```
  console.log(num);//执行结果 undefined 
  var num=10
  相当于执行了以下代码
  var num;
  console.log(num);
  num=10;
  ```
  - 函数提升就是把所有的函数声明提升到当前作用域的最前面，不调用函数。
  ```
  fun();//报错
  var fun=function(){ 
  console.log(22);
  }
  相当于执行了以下代码
  var fun;
  fun();
  fun=function(){
  console.log(22);
  }
  ```
  
  **经典案例**
  ```
  f1();
  console.log(c);
  console.log(b);
  console.log(a)
  function f1(){
    var a=b=c=9;
    console.log(a);
    console.log(b);
    console.log(c);
  }
  相当于
  function f1(){
   var a=b=c=9; **相当于** var a=9; b=9;c=9; 
   // var a=9,b=9,c=9 **相当于** var a=9 var b=9 var c=9;
   console.log(a);
   console.log(b);
   console.log(c);
  }
  f1();
  console.log(c);
  console.log(b);
  console.log(a);
  ```
  
  ## 11 javaScript 对象(重要)
  ### 11.1创建对象的三种方式
  在javaScript中，现阶段可以采用三种方式创建对象（Object）:
  #### 11.1.1 利用字面量创建对象
  ```
  var obj={};创建了一个空的对象
  var obj={
    unname:"张三疯"，
    age:18,
    sex:'男',
    sayHi:function(){
      console.log('hi~');
    }
  }
  ```
  - 里面的属性或方法采用键值对的形式
  - 多个属性或者方法中间用逗号隔开
  - 方法冒号后面跟的是一个匿名函数
  
  使用对象：
  - 调用对象的属性， 采用对象名.属性
  ```
  console.log(obj.uname);
  ```
  - 对象名['属性名']
  ```
  console.log(obj['age']);
  ```
  - 调用对象的方法 对象名.方法名()
  ```
  obj.sayHi();
  ```
  
  #### 11.1.2 利用new Object创建对象
  ```
  var obj=new Object();//创建了一个空的对象。
  obj.uname='张三疯';
  obj.age=18;
  obj.sex='name';
  obj.sayhi=function(){
    console.log('hi~');
  }
  ```
  - 利用等号赋值的方法，添加对象的属性和方法
  - 每个属性和方法之间用分号结束 
  
  #### 11.1.3 利用构造函数创建对象
  为什么需要使用构造函数
  因为前面两种创建对象的方式一次只能创建一个对象。遇到很多的属性和方法，会造成代码冗余。
  
  构造函数的定义：
  把对象里面一些相同的属性和方法抽象出来封装到函数里面。
  
  构造函数的语法格式：
  ```
  function 构造函数名(){
   this.属性=值;
   this.方法=function(){}
  }
  ```
  使用构造函数：
  new 构造函数名();
  ```
  function Star(uname,age,sex){
    this.name=uname;
    this.age=age;
    this.sex=sex;
  }
  var ldh=new Star('刘德华',18,'男');
  console.log(ldh)
  
  ```
  - 构造函数名字首字母要大写
  - 构造函数不需要return 就可以返回结果
  - 调用构造函数必须使用new
  - 只要new Star()调用函数就创建一个对象ldh{}
  - 属性和方法前面必须添加this
  
  ### 11.2 构造函数和对象
  - 构造函数，如Stars(),抽象了对象的公共部分，封装到了函数里面，它泛指某一大类。
  - 创建对象，如new Stars(),特指某一个，通过new 关键字创建对象的过程我们也称为对象实例化。
  
  ### 11.3 new关键字
  new关键字执行过程：
  1.new 构造函数可以在内存中创建了一个空的对象。
  2.this 就会指向刚才创建的空对象。
  3.执行构造函数里面的代码，给这个空对象添加属性和方法。
  4.返回这个对象（所以构造函数里面就不需要return）。
  
  ### 11.4 遍历对象
  for...in 语句用于对数据或者对象的属性进行循环操作
  ```
  for(var k in obj){
    console.log(k);
    console.log(obj[k])
  }
  ```
  
  ## 12 内置对象
  - JavaScript中的对象分为3种：自定义对象、内置对象、浏览器对象。
  - 前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于我们JS独有的。
  - 内置对象就是指JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能。
  - 内置对象最大的优点就是帮助我们快速开发。
  - JavaScript提供了多个内置对象：Math,Data,Array,String等
  
  ### 12.1 MDN查阅文档
  学习一个内置对象的使用，只要学会其常用对象的使用即可，我们可以通过查阅文档学习，可以通过MDN/W3C来查询。
  Mozilla开发者网络(MDN)提供了有关开发网络技术(Open Web)的信息，包括HTML，CSS和万维网以及HTML5应用的PI.
  MDN:[MDN Web 文档](https://developer.mozilla.org/zh-CN/)
  
  ### 12.2 Math 概述
  Math对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算。(求绝对值，取整，最大值等)
  可以使用math中的成员。
  Math.PI //圆周率
  Math.floor() 向下取整
  Math.ceil() 向上取整
  Math.round() 四舍五入就近取整
  Math.abs() 绝对值
  Math.max()/Math.min() 求最大值/最小值
  
  ### 12.3 random随机
  在两个数之间返回随机数
  ```
   function getRandom(min,max){
            return Math.floor(Math.random()*(max-min+1))+min;
        }
  ```
  
  ### 12.4 数组对象的创建
  创建数组对象的两种方式
  - 字面量方式
  ```
  var arr=[1,2,3];
  console.log(arr[0]);
  ```
  - 利用new Array()
  ```
  var arr1=new Array(2); //这个2表示 数组的长度为2，里面有2个空的数组元素。
  console.log(arr1);
  
  var arr1 =new Array(2,3);//等价于[2,3] 这样写表示，里面有2个数组元素，是2和3
  console.log(arr1);
  ```
  
  ### 12.5 检测是否为数组
  1. instanceof 运算符 它可以用来检测是否为数组
  ```
  var arr=[];
  var obj={};
  console.log(arr instanceof Array);
  console.log(obj instanceof Array);
  ```
  2. Array.isArray(参数) H5新增的方法，ie9以上版本支持
  ```
  var arr=[];
  var obj={};
  console.log(arr instanceof Array);
  console.log(obj instanceof Array);
  ``` 
  ### 12.6 添加删除数组元素的方法（重要）
  | 方法名 | 说明 |返回值|
  | ---- | ----|-----|
  | push(参数1....)| 末尾添加一个或多个元素，注意修改原数组|并返回新的长度|
  | pop() | 删除数组最后一个元素，把数组长度减1无参数，修改原数组 | 返回它删除的元素的值|
  | unshift(参数1...) | 向数组的开头添加一个或更多元素，注意修改原数组 | 并返回新的长度|
  | shift() | 删除数组的第一个元素，数组长度减1无参数，修改原数组 | 并返回第一个元素的值|
  
  #### 12.6.1 push
  push()在我们数组的末尾添加一个或者多个数组元素；
  ```
  var arr =[1,2,3];
  arr.push(4,'pink');
  console.log(arr.push(4,'pink')) //返回数组长度
  console.log(arr);
  ```
  - push是可以给数组追加新的元素
  - push参数可以直接写数组元素
  - push完毕之后，返回的结果是新数组的长度
  - 原数组也会发生变化。
  
  #### 12.6.2 unshift
  unshift() 在数组的开头，添加一个或者多个数组元素；
  ```
  var arr =[1,2,3];
  arr.unshift(4,'pink');
  console.log(arr.unshift(4,'pink')) //返回数组长度
  console.log(arr);
  ```
  - unshift是可以给数组前面追加新的元素
  - unshift参数可以直接写数组元素
  - unshift完毕之后，返回的结果是新数组的长度
  - 原数组也会发生变化。
  
  #### 12.6.3 pop
  pop() 可以删除数组的最后一个元素
  ```
  var arr=[1,2,3];
  console.log(arr.pop()); //返回删除的元素
  console.log(arr)
  ```
  - pop 是可以删除数组的最后一个元素，一次只能删除一个。
  - pop()没有参数
  - pop完毕之后，返回的结果是删除的那个元素
  - 原数组也会发生变化
  
  #### 12.6.4 shift()
  shift() 可以删除数组的第一个元素
  ```
  var arr=[1,2,3];
  console.log(arr.shift()); //返回删除的元素
  console.log(arr)
  ```
  - shift 是可以删除数组的第一个元素 一次只能删除一个元素
  - pop()没有参数
  - pop完毕之后，返回的结果是删除的那个元素
  - 原数组也会发生变化
  
  ### 12.7 数组排序
  | 方法名 | 说明 | 是否修改原数组|
  | ---- | ----|------|
  | reverse()| 颠倒数组中元素的顺序，无参数| 该方法会改变原来的数组 返回新数组|
  | sort() | 对数组的元素进行排序 | 该方法会改变原来的数组，返回新数组|
  
  #### 12.7.1 reverse()
  翻转数组
  ```
  var arr=['pink','red','blue'];
  arr.reverse();
  consol.elog(arr);
  ```
  #### 12.7.2 数组排序(冒泡排序)
  var arr1=[13,4,77,1,7];
  arr1.sort(function(a,b){
    // return a-b; 升序的顺序排列
    // return b-a; 降序的顺序排列
    // return a.localeCompare(b) //给字符串进行排序
    // return a.localeCompare(b,'zh-CN') //给中文进行排序
  });
  console.log(arr1);
  
  
  
  ### 12.8 数组索引方法
  | 方法名 | 说明 | 是否修改原数组
  | ---- | ----|------|
  | indexOf() | 数组中查找给定元素的第一个索引 | 如果存在返回索引号，如果不存在，则返回-1|
  | lastIndexOf() | 在数组中的最后一个的索引 | 如果存在返回索引号，如果不存在，则返回-1|
  
  **重点案例**
  有一个数组['c','a','z','a','x','a','x','c','b']  要求去除数组中重复的元素.
  核心代码:
  ```
  if(newArr.indexOf(arr[i])===-1){
  newArr.push(arr[i])
  }
  
  ```
  ### 12.9 数组转换为字符串
  | 方法名 | 说明 | 返回值|
  | ---- | ----|------|
  | toString()| 把数组转换成字符串，逗号分隔每一项 | 返回一个字符串|
  | join('分隔符') | 方法用于把数组中的所有元素转换为一个字符串 | 返回一个字符串|
  #### 12.9.1 toString()
  将数组转换为字符串
  ```
  var arr =[1,2,3];
  console.log(arr.toString());
  
  ```
  #### 12.9.2 join(分隔符)
  ```
  var arr1=['green','blue','pink'];
  console.log(arr1.join());  //green,blue,pink;
  console.log(arr1.join('-')); //green-blue-pink;
  console.log(arr1.join('&')); //green&blue&pink;
  ```
  
  ### 12.10 字符串对象
  
  #### 12.10.1 基本包装类型
  为了方便操作基本数组类型，JavaScript还提供了三个特殊的引用类型：String,Number和Boolean.
  基本包装类型就是把简单数据类型包装称为复杂数据类型，这样基本数据类型就有属性和方法。
  ```
  //下面代码有什么问题？
  var str='andy';
  console.log(str.length);
  ```
  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为js会把基本数据类型包装为复杂数据类型。
  其执行过程如下：
  ```
  1.生成临时变量，把简单类型包装为复杂数据类型
  var temp =new String('andy');
  2.赋值给我们声明的字符变量
  str=temp;
  3.销毁临时变量
  temp=null;
  ```
  #### 12.10.2 字符串的不可变
  指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。
  ```
  var str='abc';
  str='hello';
  //当重新给str赋值的时候，常量'abc'不会被修改，依然在内存中。
  //重新给字符串赋值，会重新再内存中开辟空间，这个特点就是字符串的不可变。
  //由于字符串的不可变，在大量拼接字符串的时候会有效率问题。
  var str='';
  for(var i=0;i小于100000;i++){
     str+=i;
  }
  console.log(str);//这个结果需要花费大量时间来显示，因为需要不断你的开辟新的空间。
  ```
  
  #### 12.10.3 根据字符返回位置
  字符串所有的方法，都不会修改字符串本身（字符串是不可变的），操作完成会返回一个新的字符串。
  | 方法名 | 说明 | 
  | ---- | ----|
  | indexOf('要查找的字符',开始的位置)) | 返回指定内容在元字符串中的位置，如果找不到就返回-1，开始的位置是index索引号 |
  | lastIndexOf() | 从后往前找，只找第一个匹配的 | 
  ```
  var str='改革春风吹满地，春天来了';
  console.log(str.indexOf('春'));
  console.log(str.indexof('春',3));//从索引号是3的位置开始往后查找。
  ```
  **经典案例** 
  查找字符串“abcoefoxyozzopp”中所有o出现的位置以及次数
  1.核心算法：先查找第一个o出现的位置。
  2.然后只要indexOf返回的结构不是-1就继续往后查找。
  3.因为indexOf只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找.
  ```
  var str="abcoefoxyozzopp";
  var index=str.indexof('o');
  while(index!==-1){
    console.log(index);
    index=str.indexOf('o',index+1);
  }
  ```
  
  #### 12.10.4 根据位置返回字符（重点）
  | 方法名 | 说明 | 使用|
  | ---- | ----|-----|
  | charAt(index) | 返回指定位置的字符(index 字符串的索引号) | str.charAt(0)|
  | charCodeAt(index)|获取指定位置处字符的ASCII码(index索引号)  |str.charCode(0)|
  |str[index]|获取指定位置处字符|HTML5 ,IE8+支持和charAt()等效|
  
  **经典案例**
  判断一个字符串'abcoefoxyozzopp'中出现次数最多的字符，并统计其次数。
  - 核心算法：利用charAt()遍历这个字符串
  - 把每个字符串都存储给对象，如果对象没有该属性，就为1，如果存在了就+1
  - 遍历对象，得到最大值和该字符
  ```
  var  str='abcoefoxyozzopp';
          var o =[];
          for(var i=0;i小于str.length;i++){
               var chars=str.charAt(i);
               if(o[chars]){
                   o[chars]++;
               }else{
                   o[chars]=1;
               }
          }
          console.log(o);
  ```
  #### 12.10.5 拼接以及截取字符串（重点）
  | 方法名 | 说明 |
  | ---- | ----|
  |concat(str1,str2,str3....)|concat()方法用于连接两个或多个字符串。拼接字符串，等效于+ | 
  | substr(start,length)| 从start位置开始（索引号），length取得个数|
  |slice(start,end)|从start位置开始，截取到end位置，end取不到(他们俩都是索引号)|
  |substring(start,end)|从start位置开始，截取到end位置，end取不到，基本和slice相同但是不接受负值|
  
  #### 12.10.6 替换字符串以及转换数组
  1.替换字符 replace ('被替换的字符','替换为的字符')，注意：它只会替换一个字符
  ```
  var str1='abcoefoxyozzopp'
  while(str1.indexof('o')!==-1){
    str1=str1.replace('o','*');
  }
  console.log(str1);
  ```
  2.字符转换为数组split('分隔符')
  ```
  var str2='red,pink,blue';
  console.log(str2.split(','))
  var str3='red$pink$blue';
  console.log(str3.split('$'))
  ```
  
  ## 13 简单数据类型与复杂数据类型
  
  ### 13.1 数据类型内存分配
  简单类型又叫做值类型.
  复杂类型又叫做引用类型.
  - 值类型：简单数据类型/基本数据类型，在存储变量中存储的是值本身，因此叫做值类型。 string,number,boolean,undefined,null
  - 引用类型：复杂数据类型，在存储时对象中存储的仅仅是地址(引用)，因此叫做引用数据类型。通过new 关键字创建的对象（系统对象，自定义对象），如Object,Array,Data等。
  - 简单数据类型是存放在栈里面，直接开辟一个空间存放的值。
  - 复杂数据类型首先在栈里面存放地址，然后这个地址指向堆里面的数据。
  
  堆栈空间分配区别：
  1.栈:由操作系统自动分配释放存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；**简单数据类型存放到栈里面**。
  2.堆：存储复杂类型（对象），一般由程序员分配释放，若程序员不释放，由垃圾回收机制进行回收。 **复杂数据类型存放到堆里面**
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
