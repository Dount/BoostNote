createdAt: "2019-08-01T02:51:16.349Z"
updatedAt: "2019-08-01T06:57:40.010Z"
type: "MARKDOWN_NOTE"
folder: "a829d630b1a42b272c49"
title: "android 获取路径目录方法与获取路径方法"
tags: []
content: '''
  ## android 获取路径目录方法与获取路径方法
  
  Environment 常用方法： 
  * 方法：getDataDirectory()
  解释：返回 File ，获取 Android 数据目录。
  * 方法：getDownloadCacheDirectory()
  解释：返回 File ，获取 Android 下载/缓存内容目录。
  * 方法：getExternalStorageDirectory()
  解释：返回 File ，获取外部存储目录即 SDCard
  * 方法：getExternalStoragePublicDirectory(String type)
  解释：返回 File ，取一个高端的公用的外部存储器目录来摆放某些类型的文件
  * 方法：getExternalStorageState()
  解释：返回 File ，获取外部存储设备的当前状态
  * 方法：getRootDirectory()
  解释：返回 File ，获取 Android 的根目录
  
  #### File 的getpath getAbsolutePath getCanonicalPath 使用
  
  #### getpath
  返回的是File构造方法里的路径，是什么就是什么，不增不减
  
  #### getAbsolutePath
  返回抽象路径名的绝对路径名字符串
  如果此抽象路径名已经是绝对路径名，则返回该路径名字符串，这与 getPath() 方法一样。如果此抽象路径名是空的抽象路径名，则返回当前用户目录的路径名字符串，该目录由系统属性 user.dir 指定。否则，使用与系统有关的方式分析此路径名。在 UNIX 系统上，通过根据当前用户目录分析某一相对路径名，可使该路径名成为绝对路径名。在 Microsoft Windows 系统上，通过由路径名指定的当前驱动器目录（如果有）来分析某一相对路径名，可使该路径名成为绝对路径名；否则，可以根据当前用户目录来分析它。
  
  #### getCanonicalpath
  返回抽象路径名的规范路径名字符串
  规范路径名是绝对路径名，并且是惟一的。规范路径名的准确定义与系统有关。如有必要，此方法首先将路径名转换成绝对路径名，这与调用 getAbsolutePath() 方法的效果一样，然后用与系统相关的方式将它映射到其惟一路径名。这通常涉及到从路径名中移除多余的名称（比如 "." 和 ".."）、分析符号连接（对于 UNIX 平台），以及将驱动器名转换成标准大小写形式（对于 Microsoft Windows 平台）。
  
  ```
  public static void main(String[] args) {
  // TODO Auto-generated methodstub
  
  System.out.println(System.getProperty("user.dir"));
  
  try {
  System.out.println("-----默认相对路径：取得路径不同------");
  File file1 =new File("..\\\\src\\\\test1.txt");
  System.out.println(file1.getPath());
  System.out.println(file1.getAbsolutePath());
  System.out.println(file1.getCanonicalPath());
  System.out.println("-----默认相对路径：取得路径不同------");
  File file =new File(".\\\\test1.txt");
  System.out.println(file.getPath());
  System.out.println(file.getAbsolutePath());
  System.out.println(file.getCanonicalPath());
  
  System.out.println("-----默认绝对路径:取得路径相同------");
  File file2 =new File("D:\\\\workspace\\\\test\\\\test1.txt");
  System.out.println(file2.getPath());
  System.out.println(file2.getAbsolutePath());
  System.out.println(file2.getCanonicalPath());
  } catch (IOException e) {
  // TODOAuto-generated catch block
  e.printStackTrace();
  }
  }
  ```
  程序执行结果如下
  ```
  F:\\eclipseworkspace\\testejb
  -----默认相对路径：取得路径不同------
  ..\\src\\test1.txt
  F:\\eclipseworkspace\\testejb\\..\\src\\test1.txt
  F:\\eclipseworkspace\\src\\test1.txt
  -----默认相对路径：取得路径不同------
  .\\test1.txt
  F:\\eclipseworkspace\\testejb\\.\\test1.txt
  F:\\eclipseworkspace\\testejb\\test1.txt
  -----默认绝对路径:取得路径相同------
  D:\\workspace\\test\\test1.txt
  D:\\workspace\\test\\test1.txt
  D:\\workspace\\test\\test1.txt
  
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
