createdAt: "2022-12-02T05:40:16.261Z"
updatedAt: "2022-12-06T14:08:24.038Z"
type: "MARKDOWN_NOTE"
folder: "bfd1eca2e356e7181dfa"
title: "React Native架构学习"
tags: []
content: '''
  # React Native架构学习
  
  ![b94b8732.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\b94b8732.png)
  
  从上到下可以分为四层，分别是**JS代码层**，**JS引擎层**，**通信层**，**原生层**。
  
  最上面的JS代码层提供了React.js支持，React.js的JSX代码转换为JS代码运行在JavaScriptCore提供的JavaScript运行时环境中，通信层将JavaScript于Native层连接起来；通信层又可以分为三部分，其中Shadow Tree用来定义UI效果及交互功能，Native Methods提供Native功能、他们之间的相互通信使用的是**JSON异步消息**。
  
  ## 线程模型
  - JS Thread: JS代码的执行线程，将源码通过Metro打包后，生成一个JSBundle的文件，然后传给JS引擎进行解析
  - Shadow Thread: 创建Shadow Tree来模拟React结构树(类似虚拟DOM)，再由Yoga引擎将Flexbox等样式，解析成原生平台的布局方式。
  - Main Thread:主要负责原生线程(NativeUI)和调用原生模块(Native Modules)
  
  ## 通过启动流程看架构设计
  ![4d064e67.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\4d064e67.png)
  
  通过Metro打包工具将React中JS代码打包成JS Bundle文件，然后通过JSCore进行解析。并通过JSON数据传递到Bridge,然后再将JSON数据传递到主线程，若其中设计UI的渲染，主线程会去调用Shadow线程(Yoga Engine)进行解析，然后将解析后的数据再传递回主线程。
  
  Yoga Engine的作用：可以将React中JS代码解析成为原生的代码形式。
  
  
  ## 通过渲染流程看架构设计
  
  ![31b8b913.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\31b8b913.png)
  
  ![ee7a7c79.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\ee7a7c79.png)
  
  ## 通过线程模型看架构设计
  ![53277ca1.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\53277ca1.png)
  - 过程1: 交互触发主线程，主线程收集相关数据，以JSON的形式传递到Bridge,后Bridge再传递给JS线程并作出响应。响应后的数据再由JSON的形式传递到Bridge中，最终再由Bridge传递到主线程。
  - 过程2：若JS线程传递到Bridge中的数据涉及UI的渲染，这时Bridge将数据传递到Shadow线程，然后通过各种计算，将得到的结果传递到主线程进行渲染。
  - 过程3：若JS线程传递到Bridge中的数据涉及调用原生模块，这时Bridge将数据传递到Native Modules.经过处理再传回Bridge中，最终由Bridge传递到主线程中。
  
  Bridge的特点：异步，序列化，批处理。
  
  ## 通过应用角度看架构设计
  ![3afe9411.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\3afe9411.png)
  
  ## 新架构
  
  ![45da8927.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\45da8927.png)
  
  三大改动:
  1. JavaScript层：
  - 支持React16+的新特征
  - 增强JS静态类检查(CodeGen)
  - 引入JSI，允许替换不同的JavaScript引擎
  2. Bridge层：
  - 划分成Fabric和TurboModules两部分，分别负责UI管理与Native模块
  
  3. Native层：
  - 精简核心模块，将非核心部分拆分出去，作为社区模块，独立更新维护
  
  ### CodeGen
  - CodeGen是FaceBook推出的代码生成工具
  - 通过CodeGen,自动将Flow或者TypeScript等有静态类型的JS代码翻译成Fabric和TurboModules使用的接口文件。
  - 加入类型约束后的作用。（减少了数据类型错误）（减少了数据验证次数，提高了通信性能）
  
  ### JSI(JavaScript Interface)
  ![92498223.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\92498223.png)
  JSI是一个用C++写成的轻量级框架。其作用主要有两个：
  1. 通过JSI，可以实现JS引擎的更换
  2. 通过JSI，可以通过JS直接调用Native
  - JS对象可以直接获取C++对象(Host Object)引用，从而允许JS与Native的直接调用
  - 减少不必要的线程通信
  - 省去了序列化和反序列化的成本
  - 减轻了通信压力，提高了通信性能。
  
  ### Fabric
  - Fabric是整个架构中的新UI层
  - 简化了之前渲染
  
  ### Turbo Modules
  - 通过JSI，可以让JS直接调用Native模块，实现同步操作，省去消息队列和JSON序列化。
  - 实现Native模块按需加载，减少启动时间，提高性能。
  
  ### 新架构-启动过程
  ![461b49ef.png](:storage\\017ebe64-e0e9-481a-b15a-d4f3afa40d90\\461b49ef.png)
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
